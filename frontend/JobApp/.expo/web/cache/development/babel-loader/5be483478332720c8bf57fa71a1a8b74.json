{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ChatListItem from \"../../components/ChatListItem.js\";\nimport AvatarImage from \"../../components/Avatar.js\";\nimport { useFocusEffect } from \"@react-navigation/native\";\nimport { AuthContext } from \"../../components/context\";\nimport io from \"socket.io-client\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function ChatScreen(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _React$useContext = React.useContext(AuthContext),\n      getUserData = _React$useContext.getUserData,\n      getAPIServiceURL = _React$useContext.getAPIServiceURL;\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      chats = _React$useState2[0],\n      setChats = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      hasConnection = _React$useState4[0],\n      setConnection = _React$useState4[1];\n\n  var _React$useState5 = React.useState(null),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      lastUpdateTime = _React$useState6[0],\n      setLastUpdateTime = _React$useState6[1];\n\n  var ioEndPoint = getAPIServiceURL() + \"/\";\n  var socket = io(ioEndPoint, {\n    transports: [\"websocket\"],\n    auth: {\n      _id: getUserData()._id\n    }\n  });\n  useFocusEffect(React.useCallback(function () {\n    navigation.setOptions({\n      headerTitle: \"Chats\",\n      headerTitleAlign: \"left\",\n      headerLeft: function headerLeft() {\n        return _jsx(View, {\n          style: {\n            marginLeft: 20\n          },\n          children: _jsx(TouchableOpacity, {\n            activeOpacity: 0.5,\n            children: _jsx(AvatarImage, {\n              size: 40,\n              uri: window.CustomVar_avatar\n            })\n          })\n        });\n      }\n    });\n    socket.connect();\n    socket.io.on(\"open\", function () {\n      return setConnection(true);\n    });\n    socket.io.on(\"close\", function () {\n      return setConnection(false);\n    });\n    socket.on(\"time-msg\", function (data) {});\n    socket.emit(\"getChatRoomData\");\n    socket.on(\"chatRoomData\", function _callee(data) {\n      var temp;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (data.success) {\n                setChats(data.data);\n\n                if (window.CustomVar_forwardChatRoomID !== null) {\n                  temp = window.CustomVar_forwardChatRoomID;\n                  window.CustomVar_forwardChatRoomID = null;\n                  enterChat(data.data.find(function (cr) {\n                    return cr._id == temp;\n                  }));\n                }\n              }\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n    return function () {\n      socket.disconnect();\n      socket.removeAllListeners();\n    };\n  }, [navigation]));\n  React.useEffect(function () {}, [chats, setChats]);\n\n  var enterChat = function enterChat(chatRoomData, foward) {\n    navigation.navigate(\"Conversation\", {\n      chatRoomData: chatRoomData\n    });\n  };\n\n  React.useEffect(function () {\n    var KeepAlive = setInterval(function () {\n      socket.emit(\"getChatRoomData\");\n    }, 1000);\n    return KeepAlive;\n  }, [navigation]);\n  return _jsx(SafeAreaView, {\n    style: {\n      backgroundColor: \"#fff\"\n    },\n    children: _jsx(ScrollView, {\n      style: styles.container,\n      children: chats.map(function (item) {\n        return _jsx(ChatListItem, {\n          id: item._id,\n          chatRoomData: item,\n          enterChat: enterChat\n        }, item._id);\n      })\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    height: \"100%\"\n  }\n});","map":{"version":3,"sources":["D:/VTC files/Github/Assignment/fyp/ReactNative/JobApp/navigation/screens/ChatScreen.js"],"names":["React","ChatListItem","AvatarImage","useFocusEffect","AuthContext","io","ChatScreen","navigation","route","useContext","getUserData","getAPIServiceURL","useState","chats","setChats","hasConnection","setConnection","lastUpdateTime","setLastUpdateTime","ioEndPoint","socket","transports","auth","_id","useCallback","setOptions","headerTitle","headerTitleAlign","headerLeft","marginLeft","window","CustomVar_avatar","connect","on","data","emit","success","CustomVar_forwardChatRoomID","temp","enterChat","find","cr","disconnect","removeAllListeners","useEffect","chatRoomData","foward","navigate","KeepAlive","setInterval","backgroundColor","styles","container","map","item","StyleSheet","create","height"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n    View,\r\n    Text,\r\n    SafeAreaView,\r\n    ScrollView,\r\n    StyleSheet,\r\n    TouchableOpacity,\r\n} from \"react-native\";\r\nimport ChatListItem from \"../../components/ChatListItem.js\";\r\nimport AvatarImage from \"../../components/Avatar.js\";\r\nimport { useFocusEffect } from \"@react-navigation/native\";\r\n\r\nimport { AuthContext } from \"../../components/context\";\r\n//TODO: Ascending order\r\nimport io from \"socket.io-client\";\r\n\r\nexport default function ChatScreen({ navigation, route }) {\r\n    const { getUserData, getAPIServiceURL } = React.useContext(AuthContext);\r\n    const [chats, setChats] = React.useState([]);\r\n\r\n    const [hasConnection, setConnection] = React.useState(false);\r\n    const [lastUpdateTime, setLastUpdateTime] = React.useState(null);\r\n    const ioEndPoint = `${getAPIServiceURL()}/`;\r\n    const socket = io(ioEndPoint, {\r\n        transports: [\"websocket\"],\r\n        auth: {\r\n            _id: getUserData()._id,\r\n        },\r\n    });\r\n    useFocusEffect(\r\n        React.useCallback(() => {\r\n            navigation.setOptions({\r\n                headerTitle: \"Chats\",\r\n                headerTitleAlign: \"left\",\r\n                headerLeft: () => (\r\n                    <View style={{ marginLeft: 20 }}>\r\n                        <TouchableOpacity activeOpacity={0.5}>\r\n                            <AvatarImage\r\n                                size={40}\r\n                                uri={window.CustomVar_avatar}\r\n                            ></AvatarImage>\r\n                        </TouchableOpacity>\r\n                    </View>\r\n                ),\r\n            });\r\n            socket.connect();\r\n            socket.io.on(\"open\", () => setConnection(true));\r\n            socket.io.on(\"close\", () => setConnection(false));\r\n            socket.on(\"time-msg\", (data) => {\r\n                // debug\r\n                // console.log(new Date(data.time).toString());\r\n                // setLastUpdateTime(data.time);\r\n            });\r\n            socket.emit(\"getChatRoomData\");\r\n            socket.on(\"chatRoomData\", async (data) => {\r\n                if (data.success) {\r\n                    setChats(data.data);\r\n                    if (window.CustomVar_forwardChatRoomID !== null) {\r\n                        let temp = window.CustomVar_forwardChatRoomID;\r\n                        window.CustomVar_forwardChatRoomID = null;\r\n                        enterChat(data.data.find((cr) => cr._id == temp));\r\n                    }\r\n                }\r\n            });\r\n            return () => {\r\n                //on unFocus\r\n                socket.disconnect();\r\n                socket.removeAllListeners();\r\n            };\r\n        }, [navigation])\r\n    );\r\n\r\n    React.useEffect(() => {\r\n        //debug\r\n        // console.log(\"Update\");\r\n    }, [chats, setChats]);\r\n\r\n    const enterChat = (chatRoomData, foward) => {\r\n        navigation.navigate(\"Conversation\", {\r\n            chatRoomData: chatRoomData,\r\n        });\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        const KeepAlive = setInterval(() => {\r\n            socket.emit(\"getChatRoomData\");\r\n        }, 1000);\r\n        return KeepAlive;\r\n    }, [navigation]);\r\n\r\n    return (\r\n        <SafeAreaView style={{ backgroundColor: \"#fff\" }}>\r\n            <ScrollView style={styles.container}>\r\n                {chats.map((item) => (\r\n                    <ChatListItem\r\n                        id={item._id}\r\n                        chatRoomData={item}\r\n                        key={item._id}\r\n                        enterChat={enterChat}\r\n                    ></ChatListItem>\r\n                ))}\r\n                {/* <ChatListItem /> */}\r\n            </ScrollView>\r\n        </SafeAreaView>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        height: \"100%\",\r\n    },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}