{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport AvatarImage from \"../../components/Avatar.js\";\nimport { useFocusEffect } from \"@react-navigation/native\";\nimport Ionicons from \"@expo/vector-icons/Ionicons\";\nimport { AuthContext } from \"../../components/context\";\nimport io from \"socket.io-client\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport default function ConversationScreen(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _React$useContext = React.useContext(AuthContext),\n      getAPIServiceURL = _React$useContext.getAPIServiceURL,\n      getUserData = _React$useContext.getUserData;\n\n  var chatRoomData = route.params.chatRoomData;\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      messages = _React$useState2[0],\n      setMessages = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      hasConnection = _React$useState4[0],\n      setConnection = _React$useState4[1];\n\n  var _React$useState5 = React.useState(null),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      lastUpdateTime = _React$useState6[0],\n      setLastUpdateTime = _React$useState6[1];\n\n  var ioEndPoint = getAPIServiceURL() + \"/\";\n\n  var _React$useState7 = React.useState(false),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      pressed = _React$useState8[0],\n      setPressed = _React$useState8[1];\n\n  var _React$useState9 = React.useState(\"\"),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      input = _React$useState10[0],\n      setInput = _React$useState10[1];\n\n  var goBackChatPage = function goBackChatPage() {\n    if (pressed) {\n      return;\n    }\n\n    setPressed(true);\n    navigation.navigate(\"Chat \");\n  };\n\n  React.useLayoutEffect(function () {\n    navigation.setOptions({\n      headerTitle: chatRoomData.targetUser.username,\n      headerBackTitleVisible: false,\n      headerTitleAlign: \"left\",\n      headerLeft: function headerLeft() {\n        return _jsxs(View, {\n          style: {\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            paddingLeft: 5\n          },\n          children: [_jsx(Ionicons, {\n            name: \"arrow-back\",\n            size: 30,\n            onPress: function onPress() {\n              goBackChatPage();\n            }\n          }), _jsx(View, {\n            style: {},\n            children: _jsx(AvatarImage, {\n              size: 40,\n              uri: chatRoomData.targetUser.avatar\n            })\n          })]\n        });\n      }\n    });\n    var socket = io(ioEndPoint, {\n      transports: [\"websocket\"],\n      auth: {\n        _id: getUserData()._id\n      }\n    });\n    socket.io.on(\"open\", function () {\n      return setConnection(true);\n    });\n    socket.io.on(\"close\", function () {\n      return setConnection(false);\n    });\n    socket.on(\"time-msg\", function (data) {});\n    socket.emit(\"getAllChatData\", chatRoomData._id);\n    socket.on(\"allChatData\", function (data) {\n      if (data.success) {\n        setMessages(data.data.map(function (message) {\n          return {\n            id: message._id,\n            content: message.content,\n            Author: message.Author,\n            createdAt: message.createdAt\n          };\n        }));\n      }\n    });\n    return function () {\n      socket.disconnect();\n      socket.removeAllListeners();\n    };\n  }, [navigation]);\n  React.useEffect(function () {}, [navigation]);\n\n  var sendMessage = function sendMessage() {\n    Keyboard.dismiss();\n  };\n\n  return _jsxs(SafeAreaView, {\n    style: {\n      flex: 1,\n      backgroundColor: \"white\"\n    },\n    children: [Platform.OS === \"ios\" ? _jsx(StatusBar, {\n      style: \"light\"\n    }) : null, _jsx(KeyboardAvoidingView, {\n      behavior: Platform.OS === \"ios\" ? \"padding\" : \"height\",\n      style: styles.container,\n      keyboardVerticalOffset: 135,\n      children: _jsx(TouchableWithoutFeedback, {\n        onPress: Keyboard.dismiss,\n        children: _jsxs(_Fragment, {\n          children: [_jsx(ScrollView, {\n            contentContainerStyle: {\n              paddingTop: 15\n            },\n            children: messages.map(function (message) {\n              message.Author === getUserData()._id ? _jsxs(View, {\n                style: styles.receiver,\n                children: [_jsx(AvatarImage, {\n                  size: 30,\n                  uri: window.CustomVar_avatar\n                }), _jsx(Text, {\n                  style: styles.recieverText,\n                  children: message.content\n                })]\n              }, message.id) : _jsxs(View, {\n                style: styles.sender,\n                children: [_jsx(AvatarImage, {\n                  size: 30,\n                  uri: chatRoomData.targetUser.avatar\n                }), _jsx(Text, {\n                  style: styles.senderText,\n                  children: message.content\n                })]\n              });\n            })\n          }), _jsxs(View, {\n            style: styles.footer,\n            children: [_jsx(TextInput, {\n              value: input,\n              onChangeText: function onChangeText(text) {\n                return setInput(text);\n              },\n              placeholder: \"Type Message\",\n              style: styles.textInput\n            }), _jsx(TouchableOpacity, {\n              onPress: sendMessage,\n              activeOpacity: 0.5,\n              children: _jsx(Ionicons, {\n                name: \"send\",\n                size: 24,\n                color: \"#2B68E6\"\n              })\n            })]\n          })]\n        })\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  receiver: {\n    padding: 15,\n    backgroundColor: \"#ECECEC\",\n    alignSelf: \"flex-end\",\n    borderRadius: 20,\n    marginRight: 15,\n    marginBottom: 20,\n    maxWidth: \"80%\",\n    position: \"relative\"\n  },\n  sender: {\n    padding: 15,\n    backgroundColor: \"#2B68E6\",\n    alignSelf: \"flex-start\",\n    borderRadius: 20,\n    marginLeft: 15,\n    maxWidth: \"80%\",\n    position: \"relative\"\n  },\n  footer: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    width: \"100%\",\n    padding: 15\n  },\n  textInput: {\n    bottom: 0,\n    height: 40,\n    flex: 1,\n    marginRight: 15,\n    borderColor: \"transparent\",\n    backgroundColor: \"#ECECEC\",\n    borderWidth: 1,\n    padding: 10,\n    color: \"grey\",\n    borderRadius: 30\n  }\n});","map":{"version":3,"sources":["D:/VTC files/Github/Assignment/fyp/ReactNative/JobApp/navigation/screens/conversationScreen.js"],"names":["React","AvatarImage","useFocusEffect","Ionicons","AuthContext","io","ConversationScreen","navigation","route","useContext","getAPIServiceURL","getUserData","chatRoomData","params","useState","messages","setMessages","hasConnection","setConnection","lastUpdateTime","setLastUpdateTime","ioEndPoint","pressed","setPressed","input","setInput","goBackChatPage","navigate","useLayoutEffect","setOptions","headerTitle","targetUser","username","headerBackTitleVisible","headerTitleAlign","headerLeft","flexDirection","alignItems","paddingLeft","avatar","socket","transports","auth","_id","on","data","emit","success","map","message","id","content","Author","createdAt","disconnect","removeAllListeners","useEffect","sendMessage","Keyboard","dismiss","flex","backgroundColor","Platform","OS","styles","container","paddingTop","receiver","window","CustomVar_avatar","recieverText","sender","senderText","footer","text","textInput","StyleSheet","create","padding","alignSelf","borderRadius","marginRight","marginBottom","maxWidth","position","marginLeft","width","bottom","height","borderColor","borderWidth","color"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n    View,\r\n    Text,\r\n    SafeAreaView,\r\n    ScrollView,\r\n    StyleSheet,\r\n    TouchableOpacity,\r\n    StatusBar,\r\n    Platform,\r\n    KeyboardAvoidingView,\r\n    TextInput,\r\n    Keyboard,\r\n    TouchableWithoutFeedback,\r\n} from \"react-native\";\r\nimport AvatarImage from \"../../components/Avatar.js\";\r\nimport { useFocusEffect } from \"@react-navigation/native\";\r\nimport Ionicons from \"react-native-vector-icons/Ionicons\";\r\nimport { AuthContext } from \"../../components/context\";\r\n//TODO: ascending order\r\nimport io from \"socket.io-client\";\r\n\r\nexport default function ConversationScreen({ navigation, route }) {\r\n    const { getAPIServiceURL, getUserData } = React.useContext(AuthContext);\r\n    const chatRoomData = route.params.chatRoomData;\r\n\r\n    const [messages, setMessages] = React.useState([]);\r\n    const [hasConnection, setConnection] = React.useState(false);\r\n    const [lastUpdateTime, setLastUpdateTime] = React.useState(null);\r\n    const ioEndPoint = `${getAPIServiceURL()}/`;\r\n    const [pressed, setPressed] = React.useState(false);\r\n    const [input, setInput] = React.useState(\"\");\r\n\r\n    const goBackChatPage = () => {\r\n        if (pressed) {\r\n            return;\r\n        }\r\n        setPressed(true);\r\n        navigation.navigate(\"Chat \");\r\n    };\r\n    React.useLayoutEffect(() => {\r\n        navigation.setOptions({\r\n            headerTitle: chatRoomData.targetUser.username,\r\n            headerBackTitleVisible: false,\r\n            headerTitleAlign: \"left\",\r\n            headerLeft: () => (\r\n                <View\r\n                    style={{\r\n                        flexDirection: \"row\",\r\n                        alignItems: \"center\",\r\n                        paddingLeft: 5,\r\n                    }}\r\n                >\r\n                    <Ionicons\r\n                        name=\"arrow-back\"\r\n                        size={30}\r\n                        onPress={() => {\r\n                            goBackChatPage();\r\n                        }}\r\n                    />\r\n                    <View style={{}}>\r\n                        <AvatarImage\r\n                            size={40}\r\n                            uri={chatRoomData.targetUser.avatar}\r\n                        ></AvatarImage>\r\n                    </View>\r\n                </View>\r\n            ),\r\n        });\r\n        //on mount\r\n        //connect to io server\r\n        const socket = io(ioEndPoint, {\r\n            transports: [\"websocket\"],\r\n            auth: {\r\n                _id: getUserData()._id,\r\n            },\r\n        });\r\n        socket.io.on(\"open\", () => setConnection(true));\r\n        socket.io.on(\"close\", () => setConnection(false));\r\n        socket.on(\"time-msg\", (data) => {\r\n            // debug\r\n            // setLastUpdateTime(data.time);\r\n        });\r\n        socket.emit(\"getAllChatData\", chatRoomData._id);\r\n        socket.on(\"allChatData\", (data) => {\r\n            if (data.success) {\r\n                setMessages(\r\n                    data.data.map((message) => ({\r\n                        id: message._id,\r\n                        content: message.content,\r\n                        Author: message.Author,\r\n                        createdAt: message.createdAt,\r\n                    }))\r\n                );\r\n            }\r\n        });\r\n        return () => {\r\n            //on unmount\r\n            socket.disconnect();\r\n            socket.removeAllListeners();\r\n        };\r\n    }, [navigation]);\r\n\r\n    React.useEffect(() => {\r\n        // //on mount\r\n        // //connect to io server\r\n        // const socket = io(ioEndPoint, {\r\n        //     transports: [\"websocket\"],\r\n        //     auth: {\r\n        //         _id: getUserData()._id,\r\n        //     },\r\n        // });\r\n        // socket.io.on(\"open\", () => setConnection(true));\r\n        // socket.io.on(\"close\", () => setConnection(false));\r\n        // socket.on(\"time-msg\", (data) => {\r\n        //     // debug\r\n        //     // setLastUpdateTime(data.time);\r\n        // });\r\n        // socket.emit(\"getAllChatData\", chatRoomData._id);\r\n        // socket.on(\"allChatData\", (data) => {\r\n        //     if (data.success) {\r\n        //         setMessages(data.data);\r\n        //     }\r\n        // });\r\n        // return () => {\r\n        //     //on unmount\r\n        //     socket.disconnect();\r\n        //     socket.removeAllListeners();\r\n        // };\r\n    }, [navigation]);\r\n\r\n    const sendMessage = () => {\r\n        Keyboard.dismiss();\r\n    };\r\n\r\n    return (\r\n        <SafeAreaView style={{ flex: 1, backgroundColor: \"white\" }}>\r\n            {Platform.OS === \"ios\" ? <StatusBar style=\"light\" /> : null}\r\n            <KeyboardAvoidingView\r\n                behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n                style={styles.container}\r\n                keyboardVerticalOffset={135}\r\n            >\r\n                <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\r\n                    <>\r\n                        <ScrollView contentContainerStyle={{ paddingTop: 15 }}>\r\n                            {/* chats */}\r\n                            {messages.map((message) => {\r\n                                message.Author === getUserData()._id ? (\r\n                                    <View\r\n                                        key={message.id}\r\n                                        style={styles.receiver}\r\n                                    >\r\n                                        <AvatarImage\r\n                                            size={30}\r\n                                            uri={window.CustomVar_avatar}\r\n                                        />\r\n                                        <Text style={styles.recieverText}>\r\n                                            {message.content}\r\n                                        </Text>\r\n                                    </View>\r\n                                ) : (\r\n                                    <View style={styles.sender}>\r\n                                        <AvatarImage\r\n                                            size={30}\r\n                                            uri={chatRoomData.targetUser.avatar}\r\n                                        />\r\n                                        <Text style={styles.senderText}>\r\n                                            {message.content}\r\n                                        </Text>\r\n                                    </View>\r\n                                );\r\n                            })}\r\n                        </ScrollView>\r\n                        <View style={styles.footer}>\r\n                            <TextInput\r\n                                value={input}\r\n                                onChangeText={(text) => setInput(text)}\r\n                                placeholder=\"Type Message\"\r\n                                style={styles.textInput}\r\n                            />\r\n                            <TouchableOpacity\r\n                                onPress={sendMessage}\r\n                                activeOpacity={0.5}\r\n                            >\r\n                                <Ionicons\r\n                                    name=\"send\"\r\n                                    size={24}\r\n                                    color=\"#2B68E6\"\r\n                                />\r\n                            </TouchableOpacity>\r\n                        </View>\r\n                    </>\r\n                </TouchableWithoutFeedback>\r\n            </KeyboardAvoidingView>\r\n        </SafeAreaView>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n    },\r\n    receiver: {\r\n        padding: 15,\r\n        backgroundColor: \"#ECECEC\",\r\n        alignSelf: \"flex-end\",\r\n        borderRadius: 20,\r\n        marginRight: 15,\r\n        marginBottom: 20,\r\n        maxWidth: \"80%\",\r\n        position: \"relative\",\r\n    },\r\n    sender: {\r\n        padding: 15,\r\n        backgroundColor: \"#2B68E6\",\r\n        alignSelf: \"flex-start\",\r\n        borderRadius: 20,\r\n        marginLeft: 15,\r\n        maxWidth: \"80%\",\r\n        position: \"relative\",\r\n    },\r\n    footer: {\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\",\r\n        width: \"100%\",\r\n        padding: 15,\r\n    },\r\n    textInput: {\r\n        bottom: 0,\r\n        height: 40,\r\n        flex: 1,\r\n        marginRight: 15,\r\n        borderColor: \"transparent\",\r\n        backgroundColor: \"#ECECEC\",\r\n        borderWidth: 1,\r\n        padding: 10,\r\n        color: \"grey\",\r\n        borderRadius: 30,\r\n    },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}