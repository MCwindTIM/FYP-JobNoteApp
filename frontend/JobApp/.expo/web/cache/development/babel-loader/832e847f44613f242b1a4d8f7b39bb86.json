{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport { ImageEditor } from \"react-native-web/dist/index\";\nimport ToastAndroid from \"react-native-web/dist/exports/ToastAndroid\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport * as FileSystem from \"expo-file-system\";\nimport { useEffect, useState, useLayoutEffect } from \"react\";\nimport * as ImageManipulator from \"expo-image-manipulator\";\nimport Ionicons from \"@expo/vector-icons/Ionicons\";\nimport MaterialCommunityIcons from \"@expo/vector-icons/MaterialCommunityIcons\";\nimport AvatarImage from \"../../components/Avatar\";\nimport { AuthContext } from \"../../components/context\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function SettingsScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _React$useContext = React.useContext(AuthContext),\n      signOut = _React$useContext.signOut,\n      getUserData = _React$useContext.getUserData,\n      setLUT = _React$useContext.setLUT,\n      getAPIServiceURL = _React$useContext.getAPIServiceURL,\n      updateAvatar = _React$useContext.updateAvatar;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  var APIServiceURL = getAPIServiceURL();\n\n  var signOutWithClearCache = function signOutWithClearCache() {\n    signOut(true);\n  };\n\n  var selectAvatar = function selectAvatar() {\n    var result, base64output;\n    return _regeneratorRuntime.async(function selectAvatar$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.Images,\n              allowsEditing: true,\n              aspect: [1, 1],\n              quality: 1\n            }));\n\n          case 2:\n            result = _context.sent;\n\n            if (!(result.cancelled === true)) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 5:\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(ImageManipulator.manipulateAsync(result.uri, [{\n              resize: {\n                width: 500,\n                height: 500\n              }\n            }], {\n              format: \"jpeg\",\n              base64: true\n            }));\n\n          case 7:\n            base64output = _context.sent;\n            fetch(APIServiceURL + \"/updateAvatar\", {\n              headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                _id: getUserData()._id\n              },\n              method: \"POST\",\n              body: JSON.stringify({\n                avatar: base64output.base64\n              })\n            }).then(function (response) {\n              if (response.status === 200) {\n                response.json().then(function (json) {\n                  if (json.success) {\n                    ToastAndroid.show(\"Avatar updated!\", ToastAndroid.SHORT);\n                    updateAvatar(base64output.base64);\n                    setImage(base64output.base64);\n                  } else {\n                    ToastAndroid.show(\"Failed to update avatar! Please Try Again Later!\", ToastAndroid.SHORT);\n                  }\n                });\n              } else {\n                console.log(response.status);\n              }\n            });\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    setImage(getUserData().avatar);\n  }, []);\n  useLayoutEffect(function () {\n    navigation.setOptions({\n      headerRight: function headerRight() {\n        return _jsx(MaterialCommunityIcons, {\n          name: \"logout\",\n          size: 30,\n          onPress: function onPress() {\n            signOut();\n          }\n        });\n      },\n      headerLeft: function headerLeft() {\n        return _jsx(Ionicons, {\n          name: \"ios-menu\",\n          size: 30,\n          onPress: function onPress() {\n            navigation.openDrawer();\n          }\n        });\n      }\n    });\n  }, []);\n  return _jsxs(View, {\n    style: {\n      flex: 1,\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      backgroundColor: \"white\"\n    },\n    children: [_jsx(Text, {\n      onPress: function onPress() {\n        return console.log(getUserData());\n      },\n      style: {\n        fontSize: 18,\n        fontWeight: \"bold\",\n        textAlign: \"center\"\n      },\n      children: \"[DEBUG] PRESS ME\"\n    }), _jsx(AvatarImage, {\n      uri: image\n    }), _jsx(Pressable, {\n      onPress: function onPress() {\n        selectAvatar();\n      },\n      style: styles.button,\n      children: _jsx(Text, {\n        style: styles.buttonText,\n        children: \"Select Avatar to upload\"\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  center: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  button: {\n    margin: 20,\n    padding: 10,\n    paddingLeft: 20,\n    paddingRight: 20,\n    backgroundColor: \"#406E9F\",\n    borderRadius: 9,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  buttonText: {\n    color: \"#fff\",\n    fontSize: 20,\n    fontWeight: \"bold\"\n  }\n});","map":{"version":3,"sources":["D:/VTC files/Github/Assignment/fyp/ReactNative/JobApp/navigation/screens/SettingsScreen.js"],"names":["React","ImageEditor","AsyncStorage","ImagePicker","FileSystem","useEffect","useState","useLayoutEffect","ImageManipulator","Ionicons","MaterialCommunityIcons","AvatarImage","AuthContext","SettingsScreen","navigation","useContext","signOut","getUserData","setLUT","getAPIServiceURL","updateAvatar","image","setImage","APIServiceURL","signOutWithClearCache","selectAvatar","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","Images","allowsEditing","aspect","quality","result","cancelled","manipulateAsync","uri","resize","width","height","format","base64","base64output","fetch","headers","Accept","_id","method","body","JSON","stringify","avatar","then","response","status","json","success","ToastAndroid","show","SHORT","console","log","setOptions","headerRight","headerLeft","openDrawer","flex","alignItems","justifyContent","backgroundColor","fontSize","fontWeight","textAlign","styles","button","buttonText","StyleSheet","create","center","margin","padding","paddingLeft","paddingRight","borderRadius","color"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n    View,\r\n    Text,\r\n    Button,\r\n    StyleSheet,\r\n    Pressable,\r\n    ImageEditor,\r\n    ToastAndroid,\r\n} from \"react-native\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport * as ImagePicker from \"expo-image-picker\";\r\nimport * as FileSystem from \"expo-file-system\";\r\nimport { useEffect, useState, useLayoutEffect } from \"react\";\r\nimport * as ImageManipulator from \"expo-image-manipulator\";\r\n\r\nimport Ionicons from \"react-native-vector-icons/Ionicons\";\r\nimport MaterialCommunityIcons from \"react-native-vector-icons/MaterialCommunityIcons\";\r\n\r\nimport AvatarImage from \"../../components/Avatar\";\r\n\r\nimport { AuthContext } from \"../../components/context\";\r\n\r\nexport default function SettingsScreen({ navigation }) {\r\n    const { signOut, getUserData, setLUT, getAPIServiceURL, updateAvatar } =\r\n        React.useContext(AuthContext);\r\n    const [image, setImage] = useState(null);\r\n    const APIServiceURL = getAPIServiceURL();\r\n    const signOutWithClearCache = () => {\r\n        signOut(true);\r\n    };\r\n\r\n    const selectAvatar = async () => {\r\n        let result = await ImagePicker.launchImageLibraryAsync({\r\n            mediaTypes: ImagePicker.MediaTypeOptions.Images,\r\n            allowsEditing: true,\r\n            aspect: [1, 1],\r\n            quality: 1,\r\n        });\r\n\r\n        if (result.cancelled === true) return;\r\n\r\n        let base64output = await ImageManipulator.manipulateAsync(\r\n            result.uri,\r\n            [{ resize: { width: 500, height: 500 } }],\r\n            { format: \"jpeg\", base64: true }\r\n        );\r\n        //upload base64 to server\r\n        fetch(`${APIServiceURL}/updateAvatar`, {\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n                _id: getUserData()._id,\r\n            },\r\n            method: \"POST\",\r\n            body: JSON.stringify({ avatar: base64output.base64 }),\r\n        }).then((response) => {\r\n            if (response.status === 200) {\r\n                response.json().then((json) => {\r\n                    if (json.success) {\r\n                        ToastAndroid.show(\r\n                            \"Avatar updated!\",\r\n                            ToastAndroid.SHORT\r\n                        );\r\n                        updateAvatar(base64output.base64);\r\n                        setImage(base64output.base64);\r\n                    } else {\r\n                        ToastAndroid.show(\r\n                            \"Failed to update avatar! Please Try Again Later!\",\r\n                            ToastAndroid.SHORT\r\n                        );\r\n                    }\r\n                });\r\n            } else {\r\n                console.log(response.status);\r\n            }\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        setImage(getUserData().avatar);\r\n    }, []);\r\n\r\n    useLayoutEffect(() => {\r\n        navigation.setOptions({\r\n            headerRight: () => (\r\n                <MaterialCommunityIcons\r\n                    name=\"logout\"\r\n                    size={30}\r\n                    onPress={() => {\r\n                        signOut();\r\n                    }}\r\n                />\r\n            ),\r\n            headerLeft: () => (\r\n                <Ionicons\r\n                    name=\"ios-menu\"\r\n                    size={30}\r\n                    onPress={() => {\r\n                        navigation.openDrawer();\r\n                    }}\r\n                />\r\n            ),\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <View\r\n            style={{\r\n                flex: 1,\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n                backgroundColor: \"white\",\r\n            }}\r\n        >\r\n            <Text\r\n                onPress={() => console.log(getUserData())}\r\n                style={{\r\n                    fontSize: 18,\r\n                    fontWeight: \"bold\",\r\n                    textAlign: \"center\",\r\n                }}\r\n            >\r\n                [DEBUG] PRESS ME\r\n            </Text>\r\n            {/* <Pressable\r\n                onPress={() => {\r\n                    signOut();\r\n                }}\r\n                style={styles.button}\r\n            >\r\n                <Text style={styles.buttonText}>Sign Out</Text>\r\n            </Pressable> */}\r\n            {/* <Pressable\r\n                onPress={() => {\r\n                    signOutWithClearCache();\r\n                }}\r\n                style={styles.button}\r\n            >\r\n                <Text style={styles.buttonText}>\r\n                    Sign Out With Deleting All The User Data\r\n                </Text>\r\n            </Pressable> */}\r\n\r\n            <AvatarImage uri={image}></AvatarImage>\r\n            <Pressable\r\n                onPress={() => {\r\n                    selectAvatar();\r\n                }}\r\n                style={styles.button}\r\n            >\r\n                <Text style={styles.buttonText}>Select Avatar to upload</Text>\r\n            </Pressable>\r\n        </View>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    center: {\r\n        flex: 1,\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n    },\r\n    button: {\r\n        margin: 20,\r\n        padding: 10,\r\n        paddingLeft: 20,\r\n        paddingRight: 20,\r\n        backgroundColor: \"#406E9F\",\r\n        borderRadius: 9,\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n    },\r\n    buttonText: {\r\n        color: \"#fff\",\r\n        fontSize: 20,\r\n        fontWeight: \"bold\",\r\n    },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}