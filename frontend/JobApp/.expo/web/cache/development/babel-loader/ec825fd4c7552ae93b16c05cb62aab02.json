{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Text } from \"react-native-paper\";\nimport Background from \"../../components/Background\";\nimport Logo from \"../../components/Logo\";\nimport Header from \"../../components/Header\";\nimport Button from \"../../components/Button\";\nimport TextInput from \"../../components/TextInput\";\nimport BackButton from \"../../components/BackButton\";\nimport { theme } from \"../../Core/Theme\";\nimport { emailValidator } from \"../util/emailValidator\";\nimport { passwordValidator } from \"../util/passwordValidator\";\nimport { nameValidator } from \"../util/nameValidator\";\nimport { AuthContext } from \"../../components/context\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function RegisterScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState({\n    value: \"\",\n    error: \"\"\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      name = _useState2[0],\n      setName = _useState2[1];\n\n  var _useState3 = useState({\n    value: \"\",\n    error: \"\"\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      email = _useState4[0],\n      setEmail = _useState4[1];\n\n  var _useState5 = useState({\n    value: \"\",\n    error: \"\"\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      password = _useState6[0],\n      setPassword = _useState6[1];\n\n  var _React$useContext = React.useContext(AuthContext),\n      signUp = _React$useContext.signUp,\n      getAPIServiceURL = _React$useContext.getAPIServiceURL;\n\n  var APIServiceURL = getAPIServiceURL();\n\n  var onSignUpPressed = function onSignUpPressed() {\n    var nameError = nameValidator(name.value);\n    var emailError = emailValidator(email.value);\n    var passwordError = passwordValidator(password.value);\n\n    if (emailError || passwordError || nameError) {\n      setName(_objectSpread(_objectSpread({}, name), {}, {\n        error: nameError\n      }));\n      setEmail(_objectSpread(_objectSpread({}, email), {}, {\n        error: emailError\n      }));\n      setPassword(_objectSpread(_objectSpread({}, password), {}, {\n        error: passwordError\n      }));\n      return;\n    }\n\n    fetch(APIServiceURL + \"/register\", {\n      headers: {\n        username: encodeURIComponent(name.value),\n        email: email.value,\n        password: encodeURIComponent(password.value)\n      }\n    }).then(function (response) {\n      if (response.status === 200) {\n        response.json().then(function _callee(json) {\n          var UserData;\n          return _regeneratorRuntime.async(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (!json.success) {\n                    _context.next = 7;\n                    break;\n                  }\n\n                  _context.next = 3;\n                  return _regeneratorRuntime.awrap(getUserData(json.UserToken));\n\n                case 3:\n                  UserData = _context.sent;\n                  signUp(json.UserToken, UserData);\n                  _context.next = 8;\n                  break;\n\n                case 7:\n                  setEmail(_objectSpread(_objectSpread({}, password), {}, {\n                    error: json.message\n                  }));\n\n                case 8:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, null, null, null, Promise);\n        });\n      } else {\n        setPassword(_objectSpread(_objectSpread({}, password), {}, {\n          error: \"Server currently not available\"\n        }));\n      }\n    });\n  };\n\n  var getUserData = function getUserData(UserToken) {\n    return _regeneratorRuntime.async(function getUserData$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n              fetch(APIServiceURL + \"/getUser\", {\n                headers: {\n                  usertoken: UserToken\n                }\n              }).then(function (response) {\n                if (response.status === 200) {\n                  response.json().then(function (json) {\n                    if (json.success) {\n                      resolve(json.data);\n                    } else {\n                      reject(json.success);\n                    }\n                  });\n                } else {\n                  reject(false);\n                }\n              });\n            }));\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(Background, {\n    children: [_jsx(Logo, {}), _jsx(Header, {\n      children: \"Create Account\"\n    }), _jsx(TextInput, {\n      label: \"Name\",\n      returnKeyType: \"next\",\n      value: name.value,\n      onChangeText: function onChangeText(text) {\n        return setName({\n          value: text,\n          error: \"\"\n        });\n      },\n      error: !!name.error,\n      errorText: name.error\n    }), _jsx(TextInput, {\n      label: \"Email\",\n      returnKeyType: \"next\",\n      value: email.value,\n      onChangeText: function onChangeText(text) {\n        return setEmail({\n          value: text,\n          error: \"\"\n        });\n      },\n      error: !!email.error,\n      errorText: email.error,\n      autoCapitalize: \"none\",\n      autoCompleteType: \"email\",\n      textContentType: \"emailAddress\",\n      keyboardType: \"email-address\"\n    }), _jsx(TextInput, {\n      label: \"Password\",\n      returnKeyType: \"done\",\n      value: password.value,\n      onChangeText: function onChangeText(text) {\n        return setPassword({\n          value: text,\n          error: \"\"\n        });\n      },\n      error: !!password.error,\n      errorText: password.error,\n      secureTextEntry: true\n    }), _jsx(Button, {\n      mode: \"contained\",\n      onPress: onSignUpPressed,\n      style: {\n        marginTop: 24\n      },\n      children: \"Sign Up\"\n    }), _jsxs(View, {\n      style: styles.row,\n      children: [_jsx(Text, {\n        children: \"Already have an account? \"\n      }), _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return navigation.replace(\"Login\");\n        },\n        children: _jsx(Text, {\n          style: styles.link,\n          children: \"Login\"\n        })\n      })]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  row: {\n    flexDirection: \"row\",\n    marginTop: 4\n  },\n  link: {\n    fontWeight: \"bold\",\n    color: theme.colors.primary\n  }\n});","map":{"version":3,"sources":["D:/VTC files/Github/Assignment/fyp/ReactNative/JobApp/navigation/screens/RegisterScreen.js"],"names":["React","useState","Text","Background","Logo","Header","Button","TextInput","BackButton","theme","emailValidator","passwordValidator","nameValidator","AuthContext","RegisterScreen","navigation","value","error","name","setName","email","setEmail","password","setPassword","useContext","signUp","getAPIServiceURL","APIServiceURL","onSignUpPressed","nameError","emailError","passwordError","fetch","headers","username","encodeURIComponent","then","response","status","json","success","getUserData","UserToken","UserData","message","Promise","resolve","reject","usertoken","data","text","marginTop","styles","row","replace","link","StyleSheet","create","flexDirection","fontWeight","color","colors","primary"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { View, StyleSheet, TouchableOpacity } from \"react-native\";\r\nimport { Text } from \"react-native-paper\";\r\nimport Background from \"../../components/Background\";\r\nimport Logo from \"../../components/Logo\";\r\nimport Header from \"../../components/Header\";\r\nimport Button from \"../../components/Button\";\r\nimport TextInput from \"../../components/TextInput\";\r\nimport BackButton from \"../../components/BackButton\";\r\nimport { theme } from \"../../Core/Theme\";\r\nimport { emailValidator } from \"../util/emailValidator\";\r\nimport { passwordValidator } from \"../util/passwordValidator\";\r\nimport { nameValidator } from \"../util/nameValidator\";\r\nimport { AuthContext } from \"../../components/context\";\r\n\r\nexport default function RegisterScreen({ navigation }) {\r\n    const [name, setName] = useState({ value: \"\", error: \"\" });\r\n    const [email, setEmail] = useState({ value: \"\", error: \"\" });\r\n    const [password, setPassword] = useState({ value: \"\", error: \"\" });\r\n\r\n    const { signUp, getAPIServiceURL } = React.useContext(AuthContext);\r\n    const APIServiceURL = getAPIServiceURL();\r\n    const onSignUpPressed = () => {\r\n        const nameError = nameValidator(name.value);\r\n        const emailError = emailValidator(email.value);\r\n        const passwordError = passwordValidator(password.value);\r\n        if (emailError || passwordError || nameError) {\r\n            setName({ ...name, error: nameError });\r\n            setEmail({ ...email, error: emailError });\r\n            setPassword({ ...password, error: passwordError });\r\n            return;\r\n        }\r\n        fetch(`${APIServiceURL}/register`, {\r\n            headers: {\r\n                username: encodeURIComponent(name.value),\r\n                email: email.value,\r\n                password: encodeURIComponent(password.value),\r\n            },\r\n        }).then((response) => {\r\n            if (response.status === 200) {\r\n                response.json().then(async (json) => {\r\n                    if (json.success) {\r\n                        const UserData = await getUserData(json.UserToken);\r\n                        signUp(json.UserToken, UserData);\r\n                    } else {\r\n                        setEmail({ ...password, error: json.message });\r\n                    }\r\n                });\r\n            } else {\r\n                setPassword({\r\n                    ...password,\r\n                    error: \"Server currently not available\",\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    const getUserData = async (UserToken) => {\r\n        return new Promise((resolve, reject) => {\r\n            fetch(`${APIServiceURL}/getUser`, {\r\n                headers: {\r\n                    usertoken: UserToken,\r\n                },\r\n            }).then((response) => {\r\n                if (response.status === 200) {\r\n                    response.json().then((json) => {\r\n                        if (json.success) {\r\n                            resolve(json.data);\r\n                        } else {\r\n                            reject(json.success);\r\n                        }\r\n                    });\r\n                } else {\r\n                    reject(false);\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Background>\r\n            {/* <BackButton goBack={navigation.goBack} /> */}\r\n            <Logo />\r\n            <Header>Create Account</Header>\r\n            <TextInput\r\n                label=\"Name\"\r\n                returnKeyType=\"next\"\r\n                value={name.value}\r\n                onChangeText={(text) => setName({ value: text, error: \"\" })}\r\n                error={!!name.error}\r\n                errorText={name.error}\r\n            />\r\n            <TextInput\r\n                label=\"Email\"\r\n                returnKeyType=\"next\"\r\n                value={email.value}\r\n                onChangeText={(text) => setEmail({ value: text, error: \"\" })}\r\n                error={!!email.error}\r\n                errorText={email.error}\r\n                autoCapitalize=\"none\"\r\n                autoCompleteType=\"email\"\r\n                textContentType=\"emailAddress\"\r\n                keyboardType=\"email-address\"\r\n            />\r\n            <TextInput\r\n                label=\"Password\"\r\n                returnKeyType=\"done\"\r\n                value={password.value}\r\n                onChangeText={(text) => setPassword({ value: text, error: \"\" })}\r\n                error={!!password.error}\r\n                errorText={password.error}\r\n                secureTextEntry\r\n            />\r\n            <Button\r\n                mode=\"contained\"\r\n                onPress={onSignUpPressed}\r\n                style={{ marginTop: 24 }}\r\n            >\r\n                Sign Up\r\n            </Button>\r\n            <View style={styles.row}>\r\n                <Text>Already have an account? </Text>\r\n                <TouchableOpacity onPress={() => navigation.replace(\"Login\")}>\r\n                    <Text style={styles.link}>Login</Text>\r\n                </TouchableOpacity>\r\n            </View>\r\n        </Background>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    row: {\r\n        flexDirection: \"row\",\r\n        marginTop: 4,\r\n    },\r\n    link: {\r\n        fontWeight: \"bold\",\r\n        color: theme.colors.primary,\r\n    },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}