{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from \"react\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport { AuthContext } from \"../../components/context\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar styles = StyleSheet.create({\n  parent: {\n    marginLeft: 0,\n    marginRight: 0,\n    borderRadius: 0,\n    borderWidth: 0,\n    flexDirection: \"row\",\n    justifyContent: \"space-between\"\n  },\n  container: {\n    flex: 1,\n    paddingTop: 0,\n    backgroundColor: \"#fff\"\n  },\n  item: {\n    padding: 10,\n    fontSize: 18,\n    height: 66\n  },\n  title: {\n    fontSize: 20\n  },\n  author: {\n    fontSize: 15\n  }\n});\n\nvar NotesFlatList = function NotesFlatList(_ref) {\n  var navigation = _ref.navigation;\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isLoading = _React$useState2[0],\n      setLoading = _React$useState2[1];\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _React$useContext = React.useContext(AuthContext),\n      getAPIServiceURL = _React$useContext.getAPIServiceURL,\n      getUserToken = _React$useContext.getUserToken;\n\n  var APIServiceURL = getAPIServiceURL();\n  var UserToken = getUserToken();\n  useEffect(function () {\n    var refreshListener = navigation.addListener(\"focus\", function (payload) {\n      fetch(APIServiceURL + \"/getAppNote\", {\n        headers: {\n          usertoken: UserToken\n        }\n      }).then(function (response) {\n        return response.json();\n      }).then(function (json) {\n        setData(json);\n      }).catch(function (error) {\n        return console.error(error);\n      }).finally(function () {\n        setLoading(false);\n      });\n    });\n    return refreshListener;\n  }, [navigation]);\n\n  var openScreen = function openScreen(route) {\n    navigation.navigate(\"Note Details\", route);\n  };\n\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(FlatList, {\n      data: data.data,\n      keyExtractor: function keyExtractor(_ref2, index) {\n        var _id = _ref2._id;\n        return _id;\n      },\n      renderItem: function renderItem(_ref3) {\n        var item = _ref3.item;\n        return _jsx(TouchableNativeFeedback, {\n          onPress: function onPress() {\n            return openScreen(item);\n          },\n          children: _jsxs(View, {\n            style: styles.item,\n            children: [_jsx(Text, {\n              style: styles.title,\n              children: decodeURIComponent(item.Note).replace(/(\\r\\n|\\n|\\r)/gm, \"\")\n            }), _jsx(Text, {\n              style: styles.author,\n              children: item.Job ? \"\\uD83D\\uDCBC\" + decodeURIComponent(item.Job.Title) + \" \\uD83D\\uDD52\" + new Date(item.createAt).toISOString().split(\"T\")[0] + \" \" + new Date(item.createAt).toISOString().split(\"T\")[1].substring(0, 8) : \"\\uD83D\\uDD52\" + new Date(item.createAt).toISOString().split(\"T\")[0] + \" \" + new Date(item.createAt).toISOString().split(\"T\")[1].substring(0, 8)\n            })]\n          })\n        });\n      },\n      refreshControl: _jsx(RefreshControl, {\n        refreshing: isLoading,\n        onRefresh: function onRefresh() {\n          setLoading(true);\n          fetch(APIServiceURL + \"/getAppNote\", {\n            headers: {\n              usertoken: UserToken\n            }\n          }).then(function (response) {\n            return response.json();\n          }).then(function (json) {\n            return setData(json);\n          }).catch(function (error) {\n            return console.error(error);\n          }).finally(function () {\n            return setLoading(false);\n          });\n        }\n      })\n    })\n  });\n};\n\nexport default NotesFlatList;","map":{"version":3,"sources":["D:/VTC files/Github/Assignment/fyp/ReactNative/JobApp/navigation/util/FlatListNotes.js"],"names":["React","useEffect","useState","AuthContext","styles","StyleSheet","create","parent","marginLeft","marginRight","borderRadius","borderWidth","flexDirection","justifyContent","container","flex","paddingTop","backgroundColor","item","padding","fontSize","height","title","author","NotesFlatList","navigation","isLoading","setLoading","data","setData","useContext","getAPIServiceURL","getUserToken","APIServiceURL","UserToken","refreshListener","addListener","payload","fetch","headers","usertoken","then","response","json","catch","error","console","finally","openScreen","route","navigate","index","_id","decodeURIComponent","Note","replace","Job","Title","Date","createAt","toISOString","split","substring"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    TouchableNativeFeedback,\r\n    SafeAreaView,\r\n    FlatList,\r\n    StyleSheet,\r\n    Text,\r\n    View,\r\n    RefreshControl,\r\n} from \"react-native\";\r\n\r\nimport { AuthContext } from \"../../components/context\";\r\n\r\nconst styles = StyleSheet.create({\r\n    parent: {\r\n        marginLeft: 0,\r\n        marginRight: 0,\r\n        borderRadius: 0,\r\n        borderWidth: 0,\r\n        flexDirection: \"row\",\r\n        justifyContent: \"space-between\",\r\n    },\r\n    container: {\r\n        flex: 1,\r\n        paddingTop: 0,\r\n        backgroundColor: \"#fff\",\r\n    },\r\n    item: {\r\n        padding: 10,\r\n        fontSize: 18,\r\n        height: 66,\r\n    },\r\n    title: {\r\n        fontSize: 20,\r\n    },\r\n    author: {\r\n        fontSize: 15,\r\n    },\r\n});\r\nconst NotesFlatList = ({ navigation }) => {\r\n    const [isLoading, setLoading] = React.useState(true);\r\n    const [data, setData] = useState([]);\r\n    const { getAPIServiceURL, getUserToken } = React.useContext(AuthContext);\r\n    const APIServiceURL = getAPIServiceURL();\r\n\r\n    const UserToken = getUserToken();\r\n\r\n    useEffect(() => {\r\n        const refreshListener = navigation.addListener(\"focus\", (payload) => {\r\n            fetch(`${APIServiceURL}/getAppNote`, {\r\n                headers: { usertoken: UserToken },\r\n            })\r\n                .then((response) => response.json())\r\n                .then((json) => {\r\n                    setData(json);\r\n                })\r\n                .catch((error) => console.error(error))\r\n                .finally(() => {\r\n                    setLoading(false);\r\n                });\r\n        });\r\n        return refreshListener;\r\n    }, [navigation]);\r\n\r\n    //function to open JobDetails Screen (item is a parameter contain prop)\r\n    const openScreen = (route) => {\r\n        navigation.navigate(\"Note Details\", route);\r\n    };\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <FlatList\r\n                data={data.data}\r\n                keyExtractor={({ _id }, index) => _id}\r\n                renderItem={({ item }) => {\r\n                    return (\r\n                        <TouchableNativeFeedback\r\n                            onPress={() => openScreen(item)}\r\n                        >\r\n                            <View style={styles.item}>\r\n                                <Text style={styles.title}>\r\n                                    {decodeURIComponent(item.Note).replace(\r\n                                        /(\\r\\n|\\n|\\r)/gm,\r\n                                        \"\"\r\n                                    )}\r\n                                </Text>\r\n                                <Text style={styles.author}>\r\n                                    {item.Job\r\n                                        ? `💼${decodeURIComponent(\r\n                                              item.Job.Title\r\n                                          )} 🕒${\r\n                                              new Date(item.createAt)\r\n                                                  .toISOString()\r\n                                                  .split(\"T\")[0]\r\n                                          } ${new Date(item.createAt)\r\n                                              .toISOString()\r\n                                              .split(\"T\")[1]\r\n                                              .substring(0, 8)}`\r\n                                        : `🕒${\r\n                                              new Date(item.createAt)\r\n                                                  .toISOString()\r\n                                                  .split(\"T\")[0]\r\n                                          } ${new Date(item.createAt)\r\n                                              .toISOString()\r\n                                              .split(\"T\")[1]\r\n                                              .substring(0, 8)}`}\r\n                                </Text>\r\n                            </View>\r\n                        </TouchableNativeFeedback>\r\n                    );\r\n                }}\r\n                refreshControl={\r\n                    <RefreshControl\r\n                        refreshing={isLoading}\r\n                        onRefresh={() => {\r\n                            setLoading(true);\r\n                            fetch(`${APIServiceURL}/getAppNote`, {\r\n                                headers: { usertoken: UserToken },\r\n                            })\r\n                                .then((response) => response.json())\r\n                                .then((json) => setData(json))\r\n                                .catch((error) => console.error(error))\r\n                                .finally(() => setLoading(false));\r\n                        }}\r\n                    />\r\n                }\r\n            />\r\n        </View>\r\n    );\r\n};\r\n\r\nexport default NotesFlatList;\r\n"]},"metadata":{},"sourceType":"module"}