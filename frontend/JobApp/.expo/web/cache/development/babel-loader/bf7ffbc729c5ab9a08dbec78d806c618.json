{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useState } from \"react\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Text } from \"react-native-paper\";\nimport Background from \"../../components/Background\";\nimport Logo from \"../../components/Logo\";\nimport Header from \"../../components/Header\";\nimport Button from \"../../components/Button\";\nimport TextInput from \"../../components/TextInput\";\nimport BackButton from \"../../components/BackButton\";\nimport { theme } from \"../../Core/Theme\";\nimport { emailValidator } from \"../util/emailValidator\";\nimport { passwordValidator } from \"../util/passwordValidator\";\nimport { AuthContext } from \"../../components/context\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState({\n    value: \"\",\n    error: \"\"\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState({\n    value: \"\",\n    error: \"\"\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var _React$useContext = React.useContext(AuthContext),\n      signIn = _React$useContext.signIn;\n\n  var onLoginPressed = function onLoginPressed() {\n    var emailError = emailValidator(email.value);\n    var passwordError = passwordValidator(password.value);\n\n    if (emailError || passwordError) {\n      setEmail(_objectSpread(_objectSpread({}, email), {}, {\n        error: emailError\n      }));\n      setPassword(_objectSpread(_objectSpread({}, password), {}, {\n        error: passwordError\n      }));\n      return;\n    }\n\n    fetch(\"http://223.16.12.55:3000/login\", {\n      headers: {\n        email: email.value,\n        password: password.value\n      }\n    }).then(function (response) {\n      if (response.status === 200) {\n        response.json().then(function (json) {\n          if (json.success) {\n            signIn(json.UserToken);\n          } else {\n            setPassword(_objectSpread(_objectSpread({}, password), {}, {\n              error: json.message\n            }));\n          }\n        });\n      } else {\n        setPassword(_objectSpread(_objectSpread({}, password), {}, {\n          error: \"Server currently not available\"\n        }));\n      }\n    });\n  };\n\n  return _jsxs(Background, {\n    children: [_jsx(Logo, {}), _jsx(Header, {\n      children: \"Welcome!\"\n    }), _jsx(TextInput, {\n      label: \"Email\",\n      returnKeyType: \"next\",\n      value: email.value,\n      onChangeText: function onChangeText(text) {\n        return setEmail({\n          value: text,\n          error: \"\"\n        });\n      },\n      error: !!email.error,\n      errorText: email.error,\n      autoCapitalize: \"none\",\n      autoCompleteType: \"email\",\n      textContentType: \"emailAddress\",\n      keyboardType: \"email-address\"\n    }), _jsx(TextInput, {\n      label: \"Password\",\n      returnKeyType: \"done\",\n      value: password.value,\n      onChangeText: function onChangeText(text) {\n        return setPassword({\n          value: text,\n          error: \"\"\n        });\n      },\n      error: !!password.error,\n      errorText: password.error,\n      secureTextEntry: true\n    }), _jsx(Button, {\n      mode: \"contained\",\n      onPress: onLoginPressed,\n      children: \"Login\"\n    }), _jsxs(View, {\n      style: styles.row,\n      children: [_jsx(Text, {\n        children: \"Don\\u2019t have an account? \"\n      }), _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return navigation.replace(\"Register\");\n        },\n        children: _jsx(Text, {\n          style: styles.link,\n          children: \"Sign up\"\n        })\n      })]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  forgotPassword: {\n    width: \"100%\",\n    alignItems: \"flex-end\",\n    marginBottom: 24\n  },\n  row: {\n    flexDirection: \"row\",\n    marginTop: 4\n  },\n  forgot: {\n    fontSize: 13,\n    color: theme.colors.secondary\n  },\n  link: {\n    fontWeight: \"bold\",\n    color: theme.colors.primary\n  }\n});","map":{"version":3,"sources":["D:/VTC files/Github/Assignment/fyp/ReactNative/JobApp/navigation/screens/LoginScreen.js"],"names":["React","useState","Text","Background","Logo","Header","Button","TextInput","BackButton","theme","emailValidator","passwordValidator","AuthContext","LoginScreen","navigation","value","error","email","setEmail","password","setPassword","useContext","signIn","onLoginPressed","emailError","passwordError","fetch","headers","then","response","status","json","success","UserToken","message","text","styles","row","replace","link","StyleSheet","create","forgotPassword","width","alignItems","marginBottom","flexDirection","marginTop","forgot","fontSize","color","colors","secondary","fontWeight","primary"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { TouchableOpacity, StyleSheet, View } from \"react-native\";\r\nimport { Text } from \"react-native-paper\";\r\nimport Background from \"../../components/Background\";\r\nimport Logo from \"../../components/Logo\";\r\nimport Header from \"../../components/Header\";\r\nimport Button from \"../../components/Button\";\r\nimport TextInput from \"../../components/TextInput\";\r\nimport BackButton from \"../../components/BackButton\";\r\nimport { theme } from \"../../Core/Theme\";\r\nimport { emailValidator } from \"../util/emailValidator\";\r\nimport { passwordValidator } from \"../util/passwordValidator\";\r\n\r\nimport { AuthContext } from \"../../components/context\";\r\n\r\nexport default function LoginScreen({ navigation }) {\r\n    const [email, setEmail] = useState({ value: \"\", error: \"\" });\r\n    const [password, setPassword] = useState({ value: \"\", error: \"\" });\r\n\r\n    const { signIn } = React.useContext(AuthContext);\r\n\r\n    const onLoginPressed = () => {\r\n        const emailError = emailValidator(email.value);\r\n        const passwordError = passwordValidator(password.value);\r\n        if (emailError || passwordError) {\r\n            setEmail({ ...email, error: emailError });\r\n            setPassword({ ...password, error: passwordError });\r\n            return;\r\n        }\r\n        //fetch user token\r\n        fetch(`http://223.16.12.55:3000/login`, {\r\n            headers: { email: email.value, password: password.value },\r\n        }).then((response) => {\r\n            if (response.status === 200) {\r\n                response.json().then((json) => {\r\n                    if (json.success) {\r\n                        signIn(json.UserToken);\r\n                    } else {\r\n                        setPassword({ ...password, error: json.message });\r\n                    }\r\n                });\r\n            } else {\r\n                setPassword({\r\n                    ...password,\r\n                    error: \"Server currently not available\",\r\n                });\r\n            }\r\n        });\r\n    };\r\n    return (\r\n        <Background>\r\n            {/* <BackButton goBack={navigation.goBack} /> */}\r\n            <Logo />\r\n            <Header>Welcome!</Header>\r\n            <TextInput\r\n                label=\"Email\"\r\n                returnKeyType=\"next\"\r\n                value={email.value}\r\n                onChangeText={(text) => setEmail({ value: text, error: \"\" })}\r\n                error={!!email.error}\r\n                errorText={email.error}\r\n                autoCapitalize=\"none\"\r\n                autoCompleteType=\"email\"\r\n                textContentType=\"emailAddress\"\r\n                keyboardType=\"email-address\"\r\n            />\r\n            <TextInput\r\n                label=\"Password\"\r\n                returnKeyType=\"done\"\r\n                value={password.value}\r\n                onChangeText={(text) => setPassword({ value: text, error: \"\" })}\r\n                error={!!password.error}\r\n                errorText={password.error}\r\n                secureTextEntry\r\n            />\r\n            {/* <View style={styles.forgotPassword}>\r\n                <TouchableOpacity\r\n                    onPress={() => navigation.navigate(\"ResetPasswordScreen\")}\r\n                >\r\n                    <Text style={styles.forgot}>Forgot your password?</Text>\r\n                </TouchableOpacity>\r\n            </View> */}\r\n            <Button mode=\"contained\" onPress={onLoginPressed}>\r\n                Login\r\n            </Button>\r\n            <View style={styles.row}>\r\n                <Text>Don’t have an account? </Text>\r\n                <TouchableOpacity\r\n                    onPress={() => navigation.replace(\"Register\")}\r\n                >\r\n                    <Text style={styles.link}>Sign up</Text>\r\n                </TouchableOpacity>\r\n            </View>\r\n        </Background>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    forgotPassword: {\r\n        width: \"100%\",\r\n        alignItems: \"flex-end\",\r\n        marginBottom: 24,\r\n    },\r\n    row: {\r\n        flexDirection: \"row\",\r\n        marginTop: 4,\r\n    },\r\n    forgot: {\r\n        fontSize: 13,\r\n        color: theme.colors.secondary,\r\n    },\r\n    link: {\r\n        fontWeight: \"bold\",\r\n        color: theme.colors.primary,\r\n    },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}