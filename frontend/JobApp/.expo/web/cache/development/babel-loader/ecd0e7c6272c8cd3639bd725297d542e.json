{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from \"react\";\nimport { DrawerNavigator } from \"./navigation/DrawerNavigator\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport RootStackNavigator from \"./navigation/RootStackNavigator\";\nimport { useEffect } from \"react\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport View from \"react-native-web/dist/exports/View\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { AuthContext } from \"./components/context\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function App() {\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isLoading = _React$useState2[0],\n      setIsLoading = _React$useState2[1];\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      userToken = _React$useState4[0],\n      setUserToken = _React$useState4[1];\n\n  var _React$useState5 = React.useState(),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      LatestuserToken = _React$useState6[0],\n      setLatestuserToken = _React$useState6[1];\n\n  var _React$useState7 = React.useState({}),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      userData = _React$useState8[0],\n      setUserData = _React$useState8[1];\n\n  var _React$useState9 = React.useState({\n    Forward: false,\n    Job: {}\n  }),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      jobRedirect = _React$useState10[0],\n      setJobRedirect = _React$useState10[1];\n\n  var _React$useState11 = React.useState(\"http://223.16.12.55\"),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      APIServiceURL = _React$useState12[0],\n      setAPIServiceURL = _React$useState12[1];\n\n  var authContext = React.useMemo(function () {\n    return {\n      setJob: function setJob(Forward, Job) {\n        setJobRedirect({\n          Forward: Forward,\n          Job: Job\n        });\n      },\n      getJobRedirect: function getJobRedirect() {\n        return jobRedirect;\n      },\n      getAPIServiceURL: function getAPIServiceURL() {\n        return APIServiceURL;\n      },\n      getMSGAPI_KEY: function getMSGAPI_KEY() {\n        return MSGAPI_KEY;\n      },\n      signIn: function signIn(UserToken, UserData) {\n        setUserToken(UserToken);\n        setUserData(UserData);\n        window.CustomVar_avatar = UserData.avatar ? UserData.avatar : null;\n        setUserTokenAsyncStorage(UserToken);\n        setIsLoading(false);\n      },\n      signOut: function signOut(clear) {\n        if (clear === false || !clear) {\n          setUserToken(null);\n          setUserData({});\n          setIsLoading(true);\n          setTimeout(function () {\n            setIsLoading(false);\n          }, 500);\n        }\n\n        if (clear === true) {\n          AsyncStorage.removeItem(\"@JobApp:LatestUserToken\", function () {\n            setLatestuserToken(null);\n            setUserToken(null);\n            setUserData({});\n            setIsLoading(true);\n            setTimeout(function () {\n              setIsLoading(false);\n            }, 500);\n          });\n        }\n      },\n      signUp: function signUp(UserToken, UserData) {\n        setUserToken(UserToken);\n        setUserData(UserData);\n        window.CustomVar_avatar = UserData.avatar ? UserData.avatar : null;\n        setUserTokenAsyncStorage(UserToken);\n        setIsLoading(false);\n      },\n      getUserToken: function getUserToken() {\n        return userToken;\n      },\n      getUserData: function getUserData() {\n        return userData;\n      },\n      setLUT: function setLUT(LUT) {\n        setLatestuserToken(LUT);\n      },\n      getLUT: function getLUT() {\n        return LatestuserToken;\n      },\n      updateAvatar: function updateAvatar(base64) {\n        setUserData(_objectSpread(_objectSpread({}, userData), {}, {\n          avatar: base64\n        }));\n        window.CustomVar_avatar = base64;\n      }\n    };\n  });\n\n  var setUserTokenAsyncStorage = function setUserTokenAsyncStorage(value) {\n    return _regeneratorRuntime.async(function setUserTokenAsyncStorage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"@JobApp:LatestUserToken\", value));\n\n          case 2:\n            setLatestuserToken(value);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    window.CustomVar_forwardChatRoomID = null;\n  });\n  useEffect(function () {\n    AsyncStorage.getItem(\"@JobApp:LatestUserToken\").then(function (value) {\n      if (value !== null) {\n        setLatestuserToken(value);\n      } else {\n        setLatestuserToken(null);\n      }\n    });\n    var createLoadingInt = setTimeout(function () {\n      setIsLoading(false);\n    }, 1500);\n    return function () {\n      clearTimeout(createLoadingInt);\n    };\n  }, [userData]);\n\n  if (isLoading) {\n    return _jsx(View, {\n      style: {\n        flex: 1,\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      },\n      children: _jsx(ActivityIndicator, {\n        size: \"large\",\n        color: \"#0000ff\"\n      })\n    });\n  }\n\n  return _jsx(AuthContext.Provider, {\n    value: authContext,\n    children: _jsx(NavigationContainer, {\n      children: userToken === undefined || userToken === null ? _jsx(RootStackNavigator, {}) : _jsx(DrawerNavigator, {})\n    })\n  });\n}","map":{"version":3,"sources":["D:/VTC files/Github/Assignment/fyp/ReactNative/JobApp/App.js"],"names":["React","DrawerNavigator","NavigationContainer","RootStackNavigator","useEffect","AsyncStorage","AuthContext","App","useState","isLoading","setIsLoading","userToken","setUserToken","LatestuserToken","setLatestuserToken","userData","setUserData","Forward","Job","jobRedirect","setJobRedirect","APIServiceURL","setAPIServiceURL","authContext","useMemo","setJob","getJobRedirect","getAPIServiceURL","getMSGAPI_KEY","MSGAPI_KEY","signIn","UserToken","UserData","window","CustomVar_avatar","avatar","setUserTokenAsyncStorage","signOut","clear","setTimeout","removeItem","signUp","getUserToken","getUserData","setLUT","LUT","getLUT","updateAvatar","base64","value","setItem","CustomVar_forwardChatRoomID","getItem","then","createLoadingInt","clearTimeout","flex","justifyContent","alignItems","undefined"],"mappings":"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","sourcesContent":["import * as React from \"react\";\n// import BottomTabNavigator from \"./navigation/TabNavigator\";\nimport { DrawerNavigator } from \"./navigation/DrawerNavigator\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport RootStackNavigator from \"./navigation/RootStackNavigator\";\nimport { useEffect } from \"react\";\nimport { ActivityIndicator, View } from \"react-native\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { AuthContext } from \"./components/context\";\n\nexport default function App() {\n    const [isLoading, setIsLoading] = React.useState(true);\n    const [userToken, setUserToken] = React.useState();\n    const [LatestuserToken, setLatestuserToken] = React.useState();\n    const [userData, setUserData] = React.useState({});\n    const [jobRedirect, setJobRedirect] = React.useState({\n        Forward: false,\n        Job: {},\n    });\n    //cloudflare provide SSL/TLS & CDN on domain \"mcwindfileserver.tk\"\n    //APIServiceURL on production should be \"https://mcwindfileserver.tk\"\n    //no rate limit on development\n    //Development API URL => \"http://223.16.12.55\"\n\n    const [APIServiceURL, setAPIServiceURL] = React.useState(\n        \"http://223.16.12.55\"\n    );\n\n    const authContext = React.useMemo(() => ({\n        setJob: (Forward, Job) => {\n            setJobRedirect({ Forward: Forward, Job: Job });\n        },\n        getJobRedirect: () => {\n            return jobRedirect;\n        },\n        getAPIServiceURL: () => {\n            return APIServiceURL;\n        },\n        getMSGAPI_KEY: () => {\n            return MSGAPI_KEY;\n        },\n        signIn: (UserToken, UserData) => {\n            setUserToken(UserToken);\n            setUserData(UserData);\n            window.CustomVar_avatar = UserData.avatar ? UserData.avatar : null;\n            setUserTokenAsyncStorage(UserToken);\n            setIsLoading(false);\n        },\n        signOut: (clear) => {\n            if (clear === false || !clear) {\n                setUserToken(null);\n                setUserData({});\n                setIsLoading(true);\n                setTimeout(() => {\n                    setIsLoading(false);\n                }, 500);\n            }\n            if (clear === true) {\n                AsyncStorage.removeItem(\"@JobApp:LatestUserToken\", () => {\n                    setLatestuserToken(null);\n                    setUserToken(null);\n                    setUserData({});\n                    setIsLoading(true);\n                    setTimeout(() => {\n                        setIsLoading(false);\n                    }, 500);\n                });\n            }\n        },\n        signUp: (UserToken, UserData) => {\n            setUserToken(UserToken);\n            setUserData(UserData);\n            window.CustomVar_avatar = UserData.avatar ? UserData.avatar : null;\n            setUserTokenAsyncStorage(UserToken);\n            setIsLoading(false);\n        },\n        getUserToken: () => {\n            return userToken;\n        },\n        getUserData: () => {\n            return userData;\n        },\n        setLUT: (LUT) => {\n            setLatestuserToken(LUT);\n        },\n        getLUT: () => {\n            return LatestuserToken;\n        },\n        updateAvatar: (base64) => {\n            //update userdata's avatar field and\n            setUserData({ ...userData, avatar: base64 });\n            window.CustomVar_avatar = base64;\n        },\n    }));\n\n    const setUserTokenAsyncStorage = async (value) => {\n        await AsyncStorage.setItem(\"@JobApp:LatestUserToken\", value);\n        setLatestuserToken(value);\n    };\n\n    useEffect(() => {\n        //set global chatroomID once on startup\n        window.CustomVar_forwardChatRoomID = null;\n    });\n\n    useEffect(() => {\n        //check asyncstorage for userToken\n        AsyncStorage.getItem(\"@JobApp:LatestUserToken\").then((value) => {\n            if (value !== null) {\n                setLatestuserToken(value);\n            } else {\n                setLatestuserToken(null);\n            }\n        });\n        let createLoadingInt = setTimeout(() => {\n            setIsLoading(false);\n        }, 1500);\n\n        return () => {\n            clearTimeout(createLoadingInt);\n        };\n    }, [userData]);\n\n    if (isLoading) {\n        return (\n            <View\n                style={{\n                    flex: 1,\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                }}\n            >\n                <ActivityIndicator size=\"large\" color=\"#0000ff\" />\n            </View>\n        );\n    }\n    return (\n        <AuthContext.Provider value={authContext}>\n            <NavigationContainer>\n                {userToken === undefined || userToken === null ? (\n                    <RootStackNavigator />\n                ) : (\n                    <DrawerNavigator />\n                )}\n            </NavigationContainer>\n        </AuthContext.Provider>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}