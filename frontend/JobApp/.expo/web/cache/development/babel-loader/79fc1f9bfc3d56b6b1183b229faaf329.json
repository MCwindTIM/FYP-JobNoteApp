{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { SecurityLevel } from \"./LocalAuthentication.types\";\nexport default {\n  get name() {\n    return 'ExpoLocalAuthentication';\n  },\n\n  hasHardwareAsync: function hasHardwareAsync() {\n    return function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", false);\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  isEnrolledAsync: function isEnrolledAsync() {\n    return function _callee2() {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", false);\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  getEnrolledLevelAsync: function getEnrolledLevelAsync() {\n    return function _callee3() {\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", SecurityLevel.NONE);\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  supportedAuthenticationTypesAsync: function supportedAuthenticationTypesAsync() {\n    return function _callee4() {\n      return _regeneratorRuntime.async(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              return _context4.abrupt(\"return\", []);\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  }\n};","map":{"version":3,"sources":["../src/ExpoLocalAuthentication.web.ts"],"names":[],"mappings":";AAAA,SAA6B,aAA7B;AAEA,eAAe;AACb,MAAI,IAAJ,GAAQ;AACN,WAAO,yBAAP;AACD,GAHY;;AAIP,EAAA,gBAJO,8BAIS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACb,KADa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAErB,GANY;AAOP,EAAA,eAPO,6BAOQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDACZ,KADY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEpB,GATY;AAUP,EAAA,qBAVO,mCAUc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAClB,aAAa,CAAC,IADI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE1B,GAZY;AAaP,EAAA,iCAbO,+CAa0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAC9B,EAD8B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEtC;AAfY,CAAf","sourcesContent":["import { AuthenticationType, SecurityLevel } from './LocalAuthentication.types';\n\nexport default {\n  get name(): string {\n    return 'ExpoLocalAuthentication';\n  },\n  async hasHardwareAsync(): Promise<boolean> {\n    return false;\n  },\n  async isEnrolledAsync(): Promise<boolean> {\n    return false;\n  },\n  async getEnrolledLevelAsync(): Promise<SecurityLevel> {\n    return SecurityLevel.NONE;\n  },\n  async supportedAuthenticationTypesAsync(): Promise<AuthenticationType[]> {\n    return [];\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}