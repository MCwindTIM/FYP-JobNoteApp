{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from \"react\";\nimport BottomTabNavigator from \"./navigation/TabNavigator\";\nimport DrawerNavigator from \"./navigation/DrawerNavigator\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport RootStackNavigator from \"./navigation/RootStackNavigator\";\nimport { useEffect, useState } from \"react\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { AuthContext } from \"./components/context\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function App() {\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isLoading = _React$useState2[0],\n      setIsLoading = _React$useState2[1];\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      userToken = _React$useState4[0],\n      setUserToken = _React$useState4[1];\n\n  var authContext = React.useMemo(function () {\n    return {\n      signIn: function signIn(UserToken) {\n        setUserToken(UserToken);\n        setIsLoading(false);\n      },\n      signOut: function signOut() {\n        setUserToken(null);\n        setIsLoading(false);\n      },\n      signUp: function signUp(UserToken) {\n        setUserToken(UserToken);\n        setIsLoading(false);\n      },\n      getUserToken: function getUserToken() {\n        return userToken;\n      }\n    };\n  });\n  useEffect(function () {\n    setTimeout(function () {\n      setIsLoading(false);\n    }, 1500);\n  }, []);\n\n  if (isLoading) {\n    return _jsx(View, {\n      style: {\n        flex: 1,\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      },\n      children: _jsx(ActivityIndicator, {\n        size: \"large\",\n        color: \"#0000ff\"\n      })\n    });\n  }\n\n  return _jsx(AuthContext.Provider, {\n    value: authContext,\n    children: _jsx(NavigationContainer, {\n      children: userToken === undefined || userToken === null ? _jsx(RootStackNavigator, {}) : _jsx(DrawerNavigator, {})\n    })\n  });\n}","map":{"version":3,"sources":["D:/VTC files/Github/Assignment/fyp/ReactNative/JobApp/App.js"],"names":["React","BottomTabNavigator","DrawerNavigator","NavigationContainer","RootStackNavigator","useEffect","useState","AuthContext","App","isLoading","setIsLoading","userToken","setUserToken","authContext","useMemo","signIn","UserToken","signOut","signUp","getUserToken","setTimeout","flex","justifyContent","alignItems","undefined"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,kBAAP;AACA,OAAOC,eAAP;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,kBAAP;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;;;AAEA,SAASC,WAAT;;AAEA,eAAe,SAASC,GAAT,GAAe;AAC1B,wBAAkCR,KAAK,CAACM,QAAN,CAAe,IAAf,CAAlC;AAAA;AAAA,MAAOG,SAAP;AAAA,MAAkBC,YAAlB;;AACA,yBAAkCV,KAAK,CAACM,QAAN,EAAlC;AAAA;AAAA,MAAOK,SAAP;AAAA,MAAkBC,YAAlB;;AAEA,MAAMC,WAAW,GAAGb,KAAK,CAACc,OAAN,CAAc;AAAA,WAAO;AACrCC,MAAAA,MAAM,EAAE,gBAACC,SAAD,EAAe;AACnBJ,QAAAA,YAAY,CAACI,SAAD,CAAZ;AACAN,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,OAJoC;AAKrCO,MAAAA,OAAO,EAAE,mBAAM;AACXL,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACAF,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,OARoC;AASrCQ,MAAAA,MAAM,EAAE,gBAACF,SAAD,EAAe;AACnBJ,QAAAA,YAAY,CAACI,SAAD,CAAZ;AACAN,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,OAZoC;AAarCS,MAAAA,YAAY,EAAE,wBAAM;AAChB,eAAOR,SAAP;AACH;AAfoC,KAAP;AAAA,GAAd,CAApB;AAkBAN,EAAAA,SAAS,CAAC,YAAM;AACZe,IAAAA,UAAU,CAAC,YAAM;AACbV,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAFS,EAEP,IAFO,CAAV;AAGH,GAJQ,EAIN,EAJM,CAAT;;AAMA,MAAID,SAAJ,EAAe;AACX,WACI,KAAC,IAAD;AACI,MAAA,KAAK,EAAE;AACHY,QAAAA,IAAI,EAAE,CADH;AAEHC,QAAAA,cAAc,EAAE,QAFb;AAGHC,QAAAA,UAAU,EAAE;AAHT,OADX;AAAA,gBAOI,KAAC,iBAAD;AAAmB,QAAA,IAAI,EAAC,OAAxB;AAAgC,QAAA,KAAK,EAAC;AAAtC;AAPJ,MADJ;AAWH;;AACD,SACI,KAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEV,WAA7B;AAAA,cACI,KAAC,mBAAD;AAAA,gBACKF,SAAS,KAAKa,SAAd,IAA2Bb,SAAS,KAAK,IAAzC,GACG,KAAC,kBAAD,KADH,GAGG,KAAC,eAAD;AAJR;AADJ,IADJ;AAWH","sourcesContent":["import * as React from \"react\";\nimport BottomTabNavigator from \"./navigation/TabNavigator\";\nimport DrawerNavigator from \"./navigation/DrawerNavigator\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport RootStackNavigator from \"./navigation/RootStackNavigator\";\nimport { useEffect, useState } from \"react\";\nimport { ActivityIndicator, StyleSheet, View, Text } from \"react-native\";\nimport { AuthContext } from \"./components/context\";\n\nexport default function App() {\n    const [isLoading, setIsLoading] = React.useState(true);\n    const [userToken, setUserToken] = React.useState();\n\n    const authContext = React.useMemo(() => ({\n        signIn: (UserToken) => {\n            setUserToken(UserToken);\n            setIsLoading(false);\n        },\n        signOut: () => {\n            setUserToken(null);\n            setIsLoading(false);\n        },\n        signUp: (UserToken) => {\n            setUserToken(UserToken);\n            setIsLoading(false);\n        },\n        getUserToken: () => {\n            return userToken;\n        },\n    }));\n\n    useEffect(() => {\n        setTimeout(() => {\n            setIsLoading(false);\n        }, 1500);\n    }, []);\n\n    if (isLoading) {\n        return (\n            <View\n                style={{\n                    flex: 1,\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                }}\n            >\n                <ActivityIndicator size=\"large\" color=\"#0000ff\" />\n            </View>\n        );\n    }\n    return (\n        <AuthContext.Provider value={authContext}>\n            <NavigationContainer>\n                {userToken === undefined || userToken === null ? (\n                    <RootStackNavigator />\n                ) : (\n                    <DrawerNavigator />\n                )}\n            </NavigationContainer>\n        </AuthContext.Provider>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}