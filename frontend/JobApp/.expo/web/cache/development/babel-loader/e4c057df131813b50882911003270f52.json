{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport AvatarImage from \"../../components/Avatar.js\";\nimport { useFocusEffect } from \"@react-navigation/native\";\nimport Ionicons from \"@expo/vector-icons/Ionicons\";\nimport { AuthContext } from \"../../components/context\";\nimport io from \"socket.io-client\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport default function ConversationScreen(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _React$useContext = React.useContext(AuthContext),\n      getAPIServiceURL = _React$useContext.getAPIServiceURL,\n      getUserData = _React$useContext.getUserData;\n\n  var chatRoomData = route.params.chatRoomData;\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      messages = _React$useState2[0],\n      setMessages = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      hasConnection = _React$useState4[0],\n      setConnection = _React$useState4[1];\n\n  var _React$useState5 = React.useState(\"\"),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      lastUpdateTime = _React$useState6[0],\n      setLastUpdateTime = _React$useState6[1];\n\n  var ioEndPoint = getAPIServiceURL() + \"/\";\n\n  var _React$useState7 = React.useState(false),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      pressed = _React$useState8[0],\n      setPressed = _React$useState8[1];\n\n  var _React$useState9 = React.useState(\"\"),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      input = _React$useState10[0],\n      setInput = _React$useState10[1];\n\n  var scrollViewRef = React.useRef();\n  var socket = io(ioEndPoint, {\n    transports: [\"websocket\"],\n    auth: {\n      _id: getUserData()._id,\n      chatRoomID: chatRoomData._id\n    }\n  });\n\n  var goBackChatPage = function goBackChatPage() {\n    if (pressed) {\n      return;\n    }\n\n    setPressed(true);\n    navigation.navigate(\"Chat \");\n  };\n\n  React.useLayoutEffect(function () {\n    navigation.setOptions({\n      headerTitle: chatRoomData.targetUser.username,\n      headerBackTitleVisible: false,\n      headerTitleAlign: \"left\",\n      headerLeft: function headerLeft() {\n        return _jsxs(View, {\n          style: {\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            paddingLeft: 5\n          },\n          children: [_jsx(Ionicons, {\n            name: \"arrow-back\",\n            size: 30,\n            onPress: function onPress() {\n              goBackChatPage();\n            }\n          }), _jsx(View, {\n            style: {},\n            children: _jsx(AvatarImage, {\n              size: 40,\n              uri: chatRoomData.targetUser.avatar\n            })\n          })]\n        });\n      }\n    });\n  }, [navigation]);\n  React.useLayoutEffect(function () {\n    socket.on(\"newMessage\", function (data) {\n      setMessages(function (messages) {\n        return [].concat(_toConsumableArray(messages), [{\n          id: data.data._id,\n          content: decodeURIComponent(data.data.content),\n          Author: data.data.Author,\n          createdAt: data.data.createAt\n        }]);\n      });\n    });\n    socket.io.on(\"open\", function () {\n      return setConnection(true);\n    });\n    socket.io.on(\"close\", function () {\n      return setConnection(false);\n    });\n    socket.on(\"time-msg\", function (data) {});\n    socket.emit(\"getAllChatData\", chatRoomData._id);\n    socket.on(\"allChatData\", function (data) {\n      if (data.success) {\n        setMessages(data.data.map(function (message) {\n          return {\n            id: message._id,\n            content: decodeURIComponent(message.content),\n            Author: message.Author,\n            createdAt: message.createAt\n          };\n        }).sort(function (a, b) {\n          return a.createdAt - b.createdAt;\n        }));\n      }\n    });\n    return function () {\n      socket.disconnect();\n      socket.removeAllListeners();\n    };\n  }, [route]);\n\n  var sendMessage = function sendMessage() {\n    if (!input.trim()) return;\n    Keyboard.dismiss();\n    setInput(\"\");\n    socket.emit(\"sendMessage\", {\n      message: encodeURIComponent(input.trim()),\n      chatRoomID: chatRoomData._id\n    });\n  };\n\n  return _jsxs(SafeAreaView, {\n    style: {\n      flex: 1,\n      backgroundColor: \"white\"\n    },\n    children: [Platform.OS === \"ios\" ? _jsx(StatusBar, {\n      style: \"light\"\n    }) : null, _jsx(KeyboardAvoidingView, {\n      behavior: Platform.OS === \"ios\" ? \"padding\" : \"height\",\n      style: styles.container,\n      keyboardVerticalOffset: 135,\n      children: _jsx(TouchableWithoutFeedback, {\n        onPress: Keyboard.dismiss,\n        children: _jsxs(_Fragment, {\n          children: [_jsx(ScrollView, {\n            ref: scrollViewRef,\n            style: {\n              backgroundColor: \"white\"\n            },\n            contentContainerStyle: {\n              paddingTop: 15\n            },\n            onContentSizeChange: function onContentSizeChange() {\n              return scrollViewRef.current.scrollToEnd({\n                animated: true\n              });\n            },\n            children: messages.map(function (message) {\n              return message.Author === getUserData()._id ? _jsxs(View, {\n                style: styles.receiver,\n                children: [_jsx(AvatarImage, {\n                  position: \"absolute\",\n                  bottom: -15,\n                  right: -5,\n                  size: 30,\n                  uri: window.CustomVar_avatar\n                }), _jsx(Text, {\n                  style: styles.recieverText,\n                  children: message.content\n                })]\n              }, message.id) : _jsxs(View, {\n                style: styles.sender,\n                children: [_jsx(AvatarImage, {\n                  position: \"absolute\",\n                  bottom: -15,\n                  left: -5,\n                  size: 30,\n                  uri: chatRoomData.targetUser.avatar\n                }), _jsx(Text, {\n                  style: styles.senderText,\n                  children: decodeURIComponent(message.content)\n                })]\n              }, message.id);\n            })\n          }), _jsxs(View, {\n            style: styles.footer,\n            children: [_jsx(TextInput, {\n              value: input,\n              onChangeText: function onChangeText(text) {\n                return setInput(text);\n              },\n              placeholder: \"Type Message\",\n              style: styles.textInput,\n              onSubmitEditing: sendMessage\n            }), _jsx(TouchableOpacity, {\n              onPress: sendMessage,\n              activeOpacity: 0.5,\n              children: _jsx(Ionicons, {\n                name: \"send\",\n                size: 24,\n                color: \"#2B68E6\"\n              })\n            })]\n          })]\n        })\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  receiver: {\n    padding: 15,\n    backgroundColor: \"#ECECEC\",\n    alignSelf: \"flex-end\",\n    borderRadius: 20,\n    marginRight: 15,\n    marginBottom: 20,\n    maxWidth: \"80%\",\n    position: \"relative\"\n  },\n  sender: {\n    padding: 15,\n    backgroundColor: \"#ECECEC\",\n    alignSelf: \"flex-start\",\n    borderRadius: 20,\n    marginLeft: 15,\n    marginBottom: 20,\n    maxWidth: \"80%\",\n    position: \"relative\"\n  },\n  footer: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    width: \"100%\",\n    padding: 15\n  },\n  textInput: {\n    bottom: 0,\n    height: 40,\n    flex: 1,\n    marginRight: 15,\n    borderColor: \"transparent\",\n    backgroundColor: \"#ECECEC\",\n    borderWidth: 1,\n    padding: 10,\n    color: \"grey\",\n    borderRadius: 30\n  }\n});","map":{"version":3,"sources":["D:/VTC files/Github/Assignment/fyp/ReactNative/JobApp/navigation/screens/conversationScreen.js"],"names":["React","AvatarImage","useFocusEffect","Ionicons","AuthContext","io","ConversationScreen","navigation","route","useContext","getAPIServiceURL","getUserData","chatRoomData","params","useState","messages","setMessages","hasConnection","setConnection","lastUpdateTime","setLastUpdateTime","ioEndPoint","pressed","setPressed","input","setInput","scrollViewRef","useRef","socket","transports","auth","_id","chatRoomID","goBackChatPage","navigate","useLayoutEffect","setOptions","headerTitle","targetUser","username","headerBackTitleVisible","headerTitleAlign","headerLeft","flexDirection","alignItems","paddingLeft","avatar","on","data","id","content","decodeURIComponent","Author","createdAt","createAt","emit","success","map","message","sort","a","b","disconnect","removeAllListeners","sendMessage","trim","Keyboard","dismiss","encodeURIComponent","flex","backgroundColor","Platform","OS","styles","container","paddingTop","current","scrollToEnd","animated","receiver","window","CustomVar_avatar","recieverText","sender","senderText","footer","text","textInput","StyleSheet","create","padding","alignSelf","borderRadius","marginRight","marginBottom","maxWidth","position","marginLeft","width","bottom","height","borderColor","borderWidth","color"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n    View,\r\n    Text,\r\n    SafeAreaView,\r\n    ScrollView,\r\n    StyleSheet,\r\n    TouchableOpacity,\r\n    StatusBar,\r\n    Platform,\r\n    KeyboardAvoidingView,\r\n    TextInput,\r\n    Keyboard,\r\n    TouchableWithoutFeedback,\r\n} from \"react-native\";\r\nimport AvatarImage from \"../../components/Avatar.js\";\r\nimport { useFocusEffect } from \"@react-navigation/native\";\r\nimport Ionicons from \"react-native-vector-icons/Ionicons\";\r\nimport { AuthContext } from \"../../components/context\";\r\n//TODO: ascending order\r\nimport io from \"socket.io-client\";\r\n\r\nexport default function ConversationScreen({ navigation, route }) {\r\n    const { getAPIServiceURL, getUserData } = React.useContext(AuthContext);\r\n    const chatRoomData = route.params.chatRoomData;\r\n    const [messages, setMessages] = React.useState([]);\r\n    const [hasConnection, setConnection] = React.useState(false);\r\n    const [lastUpdateTime, setLastUpdateTime] = React.useState(\"\");\r\n    const ioEndPoint = `${getAPIServiceURL()}/`;\r\n    const [pressed, setPressed] = React.useState(false);\r\n    const [input, setInput] = React.useState(\"\");\r\n\r\n    const scrollViewRef = React.useRef();\r\n    const socket = io(ioEndPoint, {\r\n        transports: [\"websocket\"],\r\n        auth: {\r\n            _id: getUserData()._id,\r\n            chatRoomID: chatRoomData._id,\r\n        },\r\n    });\r\n    const goBackChatPage = () => {\r\n        if (pressed) {\r\n            return;\r\n        }\r\n        setPressed(true);\r\n        navigation.navigate(\"Chat \");\r\n    };\r\n    React.useLayoutEffect(() => {\r\n        navigation.setOptions({\r\n            headerTitle: chatRoomData.targetUser.username,\r\n            headerBackTitleVisible: false,\r\n            headerTitleAlign: \"left\",\r\n            headerLeft: () => (\r\n                <View\r\n                    style={{\r\n                        flexDirection: \"row\",\r\n                        alignItems: \"center\",\r\n                        paddingLeft: 5,\r\n                    }}\r\n                >\r\n                    <Ionicons\r\n                        name=\"arrow-back\"\r\n                        size={30}\r\n                        onPress={() => {\r\n                            goBackChatPage();\r\n                        }}\r\n                    />\r\n                    <View style={{}}>\r\n                        <AvatarImage\r\n                            size={40}\r\n                            uri={chatRoomData.targetUser.avatar}\r\n                        ></AvatarImage>\r\n                    </View>\r\n                </View>\r\n            ),\r\n        });\r\n    }, [navigation]);\r\n\r\n    React.useLayoutEffect(() => {\r\n        //connect to io server\r\n        socket.on(\"newMessage\", (data) => {\r\n            setMessages((messages) => [\r\n                ...messages,\r\n                {\r\n                    id: data.data._id,\r\n                    content: decodeURIComponent(data.data.content),\r\n                    Author: data.data.Author,\r\n                    createdAt: data.data.createAt,\r\n                },\r\n            ]);\r\n        });\r\n        socket.io.on(\"open\", () => setConnection(true));\r\n        socket.io.on(\"close\", () => setConnection(false));\r\n        socket.on(\"time-msg\", (data) => {\r\n            // debug\r\n            // setLastUpdateTime(data.time);\r\n        });\r\n        socket.emit(\"getAllChatData\", chatRoomData._id);\r\n        socket.on(\"allChatData\", (data) => {\r\n            if (data.success) {\r\n                setMessages(\r\n                    data.data\r\n                        .map((message) => ({\r\n                            id: message._id,\r\n                            content: decodeURIComponent(message.content),\r\n                            Author: message.Author,\r\n                            createdAt: message.createAt,\r\n                        }))\r\n                        .sort((a, b) => a.createdAt - b.createdAt)\r\n                );\r\n            }\r\n        });\r\n\r\n        return () => {\r\n            //on unmount\r\n            socket.disconnect();\r\n            socket.removeAllListeners();\r\n        };\r\n    }, [route]);\r\n\r\n    const sendMessage = () => {\r\n        if (!input.trim()) return;\r\n        Keyboard.dismiss();\r\n        setInput(\"\");\r\n\r\n        socket.emit(\"sendMessage\", {\r\n            message: encodeURIComponent(input.trim()),\r\n            chatRoomID: chatRoomData._id,\r\n        });\r\n    };\r\n\r\n    return (\r\n        <SafeAreaView style={{ flex: 1, backgroundColor: \"white\" }}>\r\n            {Platform.OS === \"ios\" ? <StatusBar style=\"light\" /> : null}\r\n            <KeyboardAvoidingView\r\n                behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n                style={styles.container}\r\n                keyboardVerticalOffset={135}\r\n            >\r\n                <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\r\n                    <>\r\n                        <ScrollView\r\n                            ref={scrollViewRef}\r\n                            style={{ backgroundColor: \"white\" }}\r\n                            contentContainerStyle={{ paddingTop: 15 }}\r\n                            onContentSizeChange={() =>\r\n                                scrollViewRef.current.scrollToEnd({\r\n                                    animated: true,\r\n                                })\r\n                            }\r\n                        >\r\n                            {messages.map((message) =>\r\n                                message.Author === getUserData()._id ? (\r\n                                    <View\r\n                                        key={message.id}\r\n                                        style={styles.receiver}\r\n                                    >\r\n                                        <AvatarImage\r\n                                            position=\"absolute\"\r\n                                            bottom={-15}\r\n                                            right={-5}\r\n                                            size={30}\r\n                                            uri={window.CustomVar_avatar}\r\n                                        />\r\n                                        <Text style={styles.recieverText}>\r\n                                            {message.content}\r\n                                        </Text>\r\n                                    </View>\r\n                                ) : (\r\n                                    <View\r\n                                        key={message.id}\r\n                                        style={styles.sender}\r\n                                    >\r\n                                        <AvatarImage\r\n                                            position=\"absolute\"\r\n                                            bottom={-15}\r\n                                            left={-5}\r\n                                            size={30}\r\n                                            uri={chatRoomData.targetUser.avatar}\r\n                                        />\r\n                                        <Text style={styles.senderText}>\r\n                                            {decodeURIComponent(\r\n                                                message.content\r\n                                            )}\r\n                                        </Text>\r\n                                    </View>\r\n                                )\r\n                            )}\r\n                        </ScrollView>\r\n                        <View style={styles.footer}>\r\n                            <TextInput\r\n                                value={input}\r\n                                onChangeText={(text) => setInput(text)}\r\n                                placeholder=\"Type Message\"\r\n                                style={styles.textInput}\r\n                                onSubmitEditing={sendMessage}\r\n                            />\r\n                            <TouchableOpacity\r\n                                onPress={sendMessage}\r\n                                activeOpacity={0.5}\r\n                            >\r\n                                <Ionicons\r\n                                    name=\"send\"\r\n                                    size={24}\r\n                                    color=\"#2B68E6\"\r\n                                />\r\n                            </TouchableOpacity>\r\n                        </View>\r\n                    </>\r\n                </TouchableWithoutFeedback>\r\n            </KeyboardAvoidingView>\r\n        </SafeAreaView>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n    },\r\n    receiver: {\r\n        padding: 15,\r\n        backgroundColor: \"#ECECEC\",\r\n        alignSelf: \"flex-end\",\r\n        borderRadius: 20,\r\n        marginRight: 15,\r\n        marginBottom: 20,\r\n        maxWidth: \"80%\",\r\n        position: \"relative\",\r\n    },\r\n    sender: {\r\n        padding: 15,\r\n        backgroundColor: \"#ECECEC\",\r\n        alignSelf: \"flex-start\",\r\n        borderRadius: 20,\r\n        marginLeft: 15,\r\n        marginBottom: 20,\r\n        maxWidth: \"80%\",\r\n        position: \"relative\",\r\n    },\r\n    footer: {\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\",\r\n        width: \"100%\",\r\n        padding: 15,\r\n    },\r\n    textInput: {\r\n        bottom: 0,\r\n        height: 40,\r\n        flex: 1,\r\n        marginRight: 15,\r\n        borderColor: \"transparent\",\r\n        backgroundColor: \"#ECECEC\",\r\n        borderWidth: 1,\r\n        padding: 10,\r\n        color: \"grey\",\r\n        borderRadius: 30,\r\n    },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}