{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Text } from \"react-native-paper\";\nimport Background from \"../../components/Background\";\nimport Logo from \"../../components/Logo\";\nimport Header from \"../../components/Header\";\nimport Button from \"../../components/Button\";\nimport TextInput from \"../../components/TextInput\";\nimport BackButton from \"../../components/BackButton\";\nimport { theme } from \"../../Core/Theme\";\nimport { emailValidator } from \"../util/emailValidator\";\nimport { passwordValidator } from \"../util/passwordValidator\";\nimport * as LocalAuthentication from \"expo-local-authentication\";\nimport { AuthContext } from \"../../components/context\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState({\n    value: \"\",\n    error: \"\"\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState({\n    value: \"\",\n    error: \"\"\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var _React$useContext = React.useContext(AuthContext),\n      signIn = _React$useContext.signIn,\n      getAPIServiceURL = _React$useContext.getAPIServiceURL,\n      getLUT = _React$useContext.getLUT;\n\n  var APIServiceURL = getAPIServiceURL();\n  var OsVer = Platform.Version;\n\n  var _useState5 = useState(getLUT()),\n      _useState6 = _slicedToArray(_useState5, 2),\n      LatestUserToken = _useState6[0],\n      setLatestUserToken = _useState6[1];\n\n  var EResult;\n\n  (function (EResult) {\n    EResult[\"CANCELLED\"] = \"CANCELLED\";\n    EResult[\"DISABLED\"] = \"DISABLED\";\n    EResult[\"ERROR\"] = \"ERROR\";\n    EResult[\"SUCCESS\"] = \"SUCCESS\";\n  })(EResult || (EResult = {}));\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      facialRecognitionAvailable = _React$useState2[0],\n      setFacialRecognitionAvailable = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      fingerprintAvailable = _React$useState4[0],\n      setFingerprintAvailable = _React$useState4[1];\n\n  var _React$useState5 = React.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      irisAvailable = _React$useState6[0],\n      setIrisAvailable = _React$useState6[1];\n\n  var _React$useState7 = React.useState(false),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      loading = _React$useState8[0],\n      setLoading = _React$useState8[1];\n\n  var _React$useState9 = React.useState(),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      result = _React$useState10[0],\n      setResult = _React$useState10[1];\n\n  var checkSupportedAuthentication = function checkSupportedAuthentication() {\n    var types;\n    return _regeneratorRuntime.async(function checkSupportedAuthentication$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(LocalAuthentication.supportedAuthenticationTypesAsync());\n\n          case 2:\n            types = _context.sent;\n\n            if (types && types.length) {\n              setFacialRecognitionAvailable(types.includes(LocalAuthentication.AuthenticationType.FACIAL_RECOGNITION));\n              setFingerprintAvailable(types.includes(LocalAuthentication.AuthenticationType.FINGERPRINT));\n              setIrisAvailable(types.includes(LocalAuthentication.AuthenticationType.IRIS));\n            }\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var authenticate = function authenticate() {\n    var results, UserData;\n    return _regeneratorRuntime.async(function authenticate$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!loading) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 2:\n            setLoading(true);\n            _context2.prev = 3;\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(LocalAuthentication.authenticateAsync());\n\n          case 6:\n            results = _context2.sent;\n\n            if (!results.success) {\n              _context2.next = 15;\n              break;\n            }\n\n            setResult(EResult.SUCCESS);\n            _context2.next = 11;\n            return _regeneratorRuntime.awrap(getUserData(LatestUserToken));\n\n          case 11:\n            UserData = _context2.sent;\n            return _context2.abrupt(\"return\", signIn(LatestUserToken, UserData));\n\n          case 15:\n            if (results.error === \"unknown\") {\n              setResult(EResult.DISABLED);\n            } else if (results.error === \"user_cancel\" || results.error === \"system_cancel\" || results.error === \"app_cancel\") {\n              setResult(EResult.CANCELLED);\n            }\n\n          case 16:\n            _context2.next = 21;\n            break;\n\n          case 18:\n            _context2.prev = 18;\n            _context2.t0 = _context2[\"catch\"](3);\n            setResult(EResult.ERROR);\n\n          case 21:\n            setLoading(false);\n\n          case 22:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[3, 18]], Promise);\n  };\n\n  React.useEffect(function () {\n    checkSupportedAuthentication();\n    console.log(LatestUserToken);\n  }, []);\n  var resultMessage;\n\n  switch (result) {\n    case EResult.CANCELLED:\n      resultMessage = \"Authentication process has been cancelled\";\n      break;\n\n    case EResult.DISABLED:\n      resultMessage = \"Biometric authentication has been disabled\";\n      break;\n\n    case EResult.ERROR:\n      resultMessage = \"There was an error in authentication\";\n      break;\n\n    case EResult.SUCCESS:\n      resultMessage = \"Successfully authenticated\";\n      break;\n\n    default:\n      resultMessage = \"\";\n      break;\n  }\n\n  var onLoginPressed = function onLoginPressed() {\n    var emailError = emailValidator(email.value);\n    var passwordError = passwordValidator(password.value);\n\n    if (emailError || passwordError) {\n      setEmail(_objectSpread(_objectSpread({}, email), {}, {\n        error: emailError\n      }));\n      setPassword(_objectSpread(_objectSpread({}, password), {}, {\n        error: passwordError\n      }));\n      return;\n    }\n\n    fetch(APIServiceURL + \"/login\", {\n      headers: {\n        email: email.value,\n        password: encodeURIComponent(password.value)\n      }\n    }).then(function (response) {\n      if (response.status === 200) {\n        response.json().then(function _callee(json) {\n          var UserData;\n          return _regeneratorRuntime.async(function _callee$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  if (!json.success) {\n                    _context3.next = 7;\n                    break;\n                  }\n\n                  _context3.next = 3;\n                  return _regeneratorRuntime.awrap(getUserData(json.UserToken));\n\n                case 3:\n                  UserData = _context3.sent;\n                  signIn(json.UserToken, UserData);\n                  _context3.next = 8;\n                  break;\n\n                case 7:\n                  setPassword(_objectSpread(_objectSpread({}, password), {}, {\n                    error: json.message\n                  }));\n\n                case 8:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, null, null, null, Promise);\n        });\n      } else {\n        setPassword(_objectSpread(_objectSpread({}, password), {}, {\n          error: \"Server currently not available\"\n        }));\n      }\n    });\n  };\n\n  var getUserData = function getUserData(UserToken) {\n    return _regeneratorRuntime.async(function getUserData$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            return _context4.abrupt(\"return\", new Promise(function (resolve, reject) {\n              fetch(APIServiceURL + \"/getUser\", {\n                headers: {\n                  usertoken: UserToken\n                }\n              }).then(function (response) {\n                if (response.status === 200) {\n                  response.json().then(function (json) {\n                    if (json.success) {\n                      resolve(json.data);\n                    } else {\n                      reject(json.success);\n                    }\n                  });\n                } else {\n                  reject(false);\n                }\n              });\n            }));\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(Background, {\n    children: [_jsx(Logo, {}), _jsx(Header, {\n      children: \"Welcome!\"\n    }), _jsx(TextInput, {\n      label: \"Email\",\n      returnKeyType: \"next\",\n      value: email.value,\n      onChangeText: function onChangeText(text) {\n        return setEmail({\n          value: text,\n          error: \"\"\n        });\n      },\n      error: !!email.error,\n      errorText: email.error,\n      autoCapitalize: \"none\",\n      autoCompleteType: \"email\",\n      textContentType: \"emailAddress\",\n      keyboardType: \"email-address\"\n    }), _jsx(TextInput, {\n      label: \"Password\",\n      returnKeyType: \"done\",\n      value: password.value,\n      onChangeText: function onChangeText(text) {\n        return setPassword({\n          value: text,\n          error: \"\"\n        });\n      },\n      error: !!password.error,\n      errorText: password.error,\n      secureTextEntry: true\n    }), _jsx(Button, {\n      mode: \"contained\",\n      onPress: onLoginPressed,\n      children: \"Login\"\n    }), _jsx(View, {\n      children: facialRecognitionAvailable && LatestUserToken !== null || fingerprintAvailable && LatestUserToken !== null || irisAvailable && LatestUserToken !== null ? _jsx(Button, {\n        mode: \"contained\",\n        onPress: authenticate,\n        children: \"Biometric Authentication\"\n      }) : null\n    }), _jsxs(View, {\n      style: styles.row,\n      children: [_jsx(Text, {\n        children: \"Don\\u2019t have an account? \"\n      }), _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return navigation.replace(\"Register\");\n        },\n        children: _jsx(Text, {\n          style: styles.link,\n          children: \"Sign up\"\n        })\n      })]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  forgotPassword: {\n    width: \"100%\",\n    alignItems: \"flex-end\",\n    marginBottom: 24\n  },\n  row: {\n    flexDirection: \"row\",\n    marginTop: 4\n  },\n  forgot: {\n    fontSize: 13,\n    color: theme.colors.secondary\n  },\n  link: {\n    fontWeight: \"bold\",\n    color: theme.colors.primary\n  }\n});","map":{"version":3,"sources":["D:/VTC files/Github/Assignment/fyp/ReactNative/JobApp/navigation/screens/LoginScreen.js"],"names":["React","useState","Text","Background","Logo","Header","Button","TextInput","BackButton","theme","emailValidator","passwordValidator","LocalAuthentication","AuthContext","LoginScreen","navigation","value","error","email","setEmail","password","setPassword","useContext","signIn","getAPIServiceURL","getLUT","APIServiceURL","OsVer","Platform","Version","LatestUserToken","setLatestUserToken","EResult","facialRecognitionAvailable","setFacialRecognitionAvailable","fingerprintAvailable","setFingerprintAvailable","irisAvailable","setIrisAvailable","loading","setLoading","result","setResult","checkSupportedAuthentication","supportedAuthenticationTypesAsync","types","length","includes","AuthenticationType","FACIAL_RECOGNITION","FINGERPRINT","IRIS","authenticate","authenticateAsync","results","success","SUCCESS","getUserData","UserData","DISABLED","CANCELLED","ERROR","useEffect","console","log","resultMessage","onLoginPressed","emailError","passwordError","fetch","headers","encodeURIComponent","then","response","status","json","UserToken","message","Promise","resolve","reject","usertoken","data","text","styles","row","replace","link","StyleSheet","create","forgotPassword","width","alignItems","marginBottom","flexDirection","marginTop","forgot","fontSize","color","colors","secondary","fontWeight","primary"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { TouchableOpacity, StyleSheet, View, Platform } from \"react-native\";\r\nimport { Text } from \"react-native-paper\";\r\nimport Background from \"../../components/Background\";\r\nimport Logo from \"../../components/Logo\";\r\nimport Header from \"../../components/Header\";\r\nimport Button from \"../../components/Button\";\r\nimport TextInput from \"../../components/TextInput\";\r\nimport BackButton from \"../../components/BackButton\";\r\nimport { theme } from \"../../Core/Theme\";\r\nimport { emailValidator } from \"../util/emailValidator\";\r\nimport { passwordValidator } from \"../util/passwordValidator\";\r\n\r\n//import Biometric Authentication\r\nimport * as LocalAuthentication from \"expo-local-authentication\";\r\n\r\nimport { AuthContext } from \"../../components/context\";\r\n\r\nexport default function LoginScreen({ navigation }) {\r\n    const [email, setEmail] = useState({ value: \"\", error: \"\" });\r\n    const [password, setPassword] = useState({ value: \"\", error: \"\" });\r\n\r\n    const { signIn, getAPIServiceURL, getLUT } = React.useContext(AuthContext);\r\n    const APIServiceURL = getAPIServiceURL();\r\n\r\n    //check android api level\r\n    const OsVer = Platform.Version;\r\n\r\n    let [LatestUserToken, setLatestUserToken] = useState(getLUT());\r\n    // console.log(OsVer);\r\n    //API level 28+ (Uses Android native BiometricPrompt)\r\n    //<uses-permission android:name=\"android.permission.USE_BIOMETRIC\" />\r\n    //API level 23-28 (Uses Android native FingerprintCompat)\r\n    //<uses-permission android:name=\"android.permission.USE_FINGERPRINT\" />\r\n\r\n    //BiometricAuthentication\r\n    var EResult;\r\n    (function (EResult) {\r\n        EResult[\"CANCELLED\"] = \"CANCELLED\";\r\n        EResult[\"DISABLED\"] = \"DISABLED\";\r\n        EResult[\"ERROR\"] = \"ERROR\";\r\n        EResult[\"SUCCESS\"] = \"SUCCESS\";\r\n    })(EResult || (EResult = {}));\r\n\r\n    const [facialRecognitionAvailable, setFacialRecognitionAvailable] =\r\n        React.useState(false);\r\n    const [fingerprintAvailable, setFingerprintAvailable] =\r\n        React.useState(false);\r\n    const [irisAvailable, setIrisAvailable] = React.useState(false);\r\n    const [loading, setLoading] = React.useState(false);\r\n    const [result, setResult] = React.useState();\r\n    const checkSupportedAuthentication = async () => {\r\n        const types =\r\n            await LocalAuthentication.supportedAuthenticationTypesAsync();\r\n        if (types && types.length) {\r\n            setFacialRecognitionAvailable(\r\n                types.includes(\r\n                    LocalAuthentication.AuthenticationType.FACIAL_RECOGNITION\r\n                )\r\n            );\r\n            setFingerprintAvailable(\r\n                types.includes(\r\n                    LocalAuthentication.AuthenticationType.FINGERPRINT\r\n                )\r\n            );\r\n            setIrisAvailable(\r\n                types.includes(LocalAuthentication.AuthenticationType.IRIS)\r\n            );\r\n        }\r\n    };\r\n\r\n    const authenticate = async () => {\r\n        if (loading) {\r\n            return;\r\n        }\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const results = await LocalAuthentication.authenticateAsync();\r\n\r\n            if (results.success) {\r\n                setResult(EResult.SUCCESS);\r\n                const UserData = await getUserData(LatestUserToken);\r\n                return signIn(LatestUserToken, UserData);\r\n            } else if (results.error === \"unknown\") {\r\n                setResult(EResult.DISABLED);\r\n            } else if (\r\n                results.error === \"user_cancel\" ||\r\n                results.error === \"system_cancel\" ||\r\n                results.error === \"app_cancel\"\r\n            ) {\r\n                setResult(EResult.CANCELLED);\r\n            }\r\n        } catch (error) {\r\n            setResult(EResult.ERROR);\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        checkSupportedAuthentication();\r\n        console.log(LatestUserToken);\r\n    }, []);\r\n\r\n    let resultMessage;\r\n    switch (result) {\r\n        case EResult.CANCELLED:\r\n            resultMessage = \"Authentication process has been cancelled\";\r\n            break;\r\n        case EResult.DISABLED:\r\n            resultMessage = \"Biometric authentication has been disabled\";\r\n            break;\r\n        case EResult.ERROR:\r\n            resultMessage = \"There was an error in authentication\";\r\n            break;\r\n        case EResult.SUCCESS:\r\n            resultMessage = \"Successfully authenticated\";\r\n            break;\r\n        default:\r\n            resultMessage = \"\";\r\n            break;\r\n    }\r\n\r\n    // let description;\r\n    // if (facialRecognitionAvailable && fingerprintAvailable && irisAvailable) {\r\n    //     description = \"Authenticate with Face ID, touch ID or iris ID\";\r\n    // } else if (facialRecognitionAvailable && fingerprintAvailable) {\r\n    //     description = \"Authenticate with Face ID or touch ID\";\r\n    // } else if (facialRecognitionAvailable && irisAvailable) {\r\n    //     description = \"Authenticate with Face ID or iris ID\";\r\n    // } else if (fingerprintAvailable && irisAvailable) {\r\n    //     description = \"Authenticate with touch ID or iris ID\";\r\n    // } else if (facialRecognitionAvailable) {\r\n    //     description = \"Authenticate with Face ID\";\r\n    // } else if (fingerprintAvailable) {\r\n    //     description = \"Authenticate with touch ID \";\r\n    // } else if (irisAvailable) {\r\n    //     description = \"Authenticate with iris ID\";\r\n    // } else {\r\n    //     description = \"No biometric authentication methods available\";\r\n    // }\r\n\r\n    const onLoginPressed = () => {\r\n        const emailError = emailValidator(email.value);\r\n        const passwordError = passwordValidator(password.value);\r\n        if (emailError || passwordError) {\r\n            setEmail({ ...email, error: emailError });\r\n            setPassword({ ...password, error: passwordError });\r\n            return;\r\n        }\r\n        //fetch user token\r\n        fetch(`${APIServiceURL}/login`, {\r\n            headers: {\r\n                email: email.value,\r\n                password: encodeURIComponent(password.value),\r\n            },\r\n        }).then((response) => {\r\n            if (response.status === 200) {\r\n                response.json().then(async (json) => {\r\n                    if (json.success) {\r\n                        const UserData = await getUserData(json.UserToken);\r\n                        signIn(json.UserToken, UserData);\r\n                    } else {\r\n                        setPassword({ ...password, error: json.message });\r\n                    }\r\n                });\r\n            } else {\r\n                setPassword({\r\n                    ...password,\r\n                    error: \"Server currently not available\",\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    const getUserData = async (UserToken) => {\r\n        return new Promise((resolve, reject) => {\r\n            fetch(`${APIServiceURL}/getUser`, {\r\n                headers: {\r\n                    usertoken: UserToken,\r\n                },\r\n            }).then((response) => {\r\n                if (response.status === 200) {\r\n                    response.json().then((json) => {\r\n                        if (json.success) {\r\n                            resolve(json.data);\r\n                        } else {\r\n                            reject(json.success);\r\n                        }\r\n                    });\r\n                } else {\r\n                    reject(false);\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Background>\r\n            {/* <BackButton goBack={navigation.goBack} /> */}\r\n            <Logo />\r\n            <Header>Welcome!</Header>\r\n            <TextInput\r\n                label=\"Email\"\r\n                returnKeyType=\"next\"\r\n                value={email.value}\r\n                onChangeText={(text) => setEmail({ value: text, error: \"\" })}\r\n                error={!!email.error}\r\n                errorText={email.error}\r\n                autoCapitalize=\"none\"\r\n                autoCompleteType=\"email\"\r\n                textContentType=\"emailAddress\"\r\n                keyboardType=\"email-address\"\r\n            />\r\n            <TextInput\r\n                label=\"Password\"\r\n                returnKeyType=\"done\"\r\n                value={password.value}\r\n                onChangeText={(text) => setPassword({ value: text, error: \"\" })}\r\n                error={!!password.error}\r\n                errorText={password.error}\r\n                secureTextEntry\r\n            />\r\n            {/* <View style={styles.forgotPassword}>\r\n                <TouchableOpacity\r\n                    onPress={() => navigation.navigate(\"ResetPasswordScreen\")}\r\n                >\r\n                    <Text style={styles.forgot}>Forgot your password?</Text>\r\n                </TouchableOpacity>\r\n            </View> */}\r\n            <Button mode=\"contained\" onPress={onLoginPressed}>\r\n                Login\r\n            </Button>\r\n            {/* start Biometric Authentication */}\r\n            <View>\r\n                {(facialRecognitionAvailable && LatestUserToken !== null) ||\r\n                (fingerprintAvailable && LatestUserToken !== null) ||\r\n                (irisAvailable && LatestUserToken !== null) ? (\r\n                    <Button mode=\"contained\" onPress={authenticate}>\r\n                        Biometric Authentication\r\n                    </Button>\r\n                ) : null}\r\n                {/* {resultMessage ? <Text>{resultMessage}</Text> : null}//debug usage */}\r\n            </View>\r\n            {/* end Biometric Authentication */}\r\n            <View style={styles.row}>\r\n                <Text>Don’t have an account? </Text>\r\n                <TouchableOpacity\r\n                    onPress={() => navigation.replace(\"Register\")}\r\n                >\r\n                    <Text style={styles.link}>Sign up</Text>\r\n                </TouchableOpacity>\r\n            </View>\r\n        </Background>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    forgotPassword: {\r\n        width: \"100%\",\r\n        alignItems: \"flex-end\",\r\n        marginBottom: 24,\r\n    },\r\n    row: {\r\n        flexDirection: \"row\",\r\n        marginTop: 4,\r\n    },\r\n    forgot: {\r\n        fontSize: 13,\r\n        color: theme.colors.secondary,\r\n    },\r\n    link: {\r\n        fontWeight: \"bold\",\r\n        color: theme.colors.primary,\r\n    },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}