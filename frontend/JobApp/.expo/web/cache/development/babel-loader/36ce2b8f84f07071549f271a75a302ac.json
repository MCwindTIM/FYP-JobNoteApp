{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from \"react\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport SearchBar from \"../../components/SearchBar\";\nimport ClearInput from \"../../components/ClearInput\";\nimport { AuthContext } from \"../../components/context\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar styles = StyleSheet.create({\n  parent: {\n    marginLeft: 0,\n    marginRight: 0,\n    borderRadius: 0,\n    borderWidth: 0,\n    flexDirection: \"row\",\n    justifyContent: \"space-between\"\n  },\n  container: {\n    flex: 1,\n    paddingTop: 0\n  },\n  item: {\n    padding: 10,\n    fontSize: 18,\n    height: 66\n  },\n  title: {\n    fontSize: 20\n  },\n  author: {\n    fontSize: 15\n  }\n});\n\nvar JobFlatList = function JobFlatList(_ref) {\n  var navigation = _ref.navigation;\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isLoading = _React$useState2[0],\n      setLoading = _React$useState2[1];\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      searchText = _useState4[0],\n      setSearchText = _useState4[1];\n\n  var _React$useContext = React.useContext(AuthContext),\n      getAPIServiceURL = _React$useContext.getAPIServiceURL;\n\n  var APIServiceURL = getAPIServiceURL();\n  useEffect(function () {\n    var refresh = navigation.addListener(\"focus\", function () {\n      fetch(APIServiceURL + \"/getAllJobData\").then(function (response) {\n        return response.json();\n      }).then(function (json) {\n        return setData(json);\n      }).catch(function (error) {\n        return console.error(error);\n      }).finally(function () {\n        return setLoading(false);\n      });\n    });\n  }, []);\n\n  var openScreen = function openScreen(item) {\n    navigation.navigate(\"JobDetails\", item);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(View, {\n      style: styles.parent,\n      children: [_jsx(SearchBar, {\n        clearButtonMode: \"always\",\n        label: \"Search\",\n        returnKeyType: \"next\",\n        value: searchText,\n        onChangeText: function onChangeText(text) {\n          return setSearchText(text);\n        }\n      }), _jsx(ClearInput, {\n        onPress: function onPress() {\n          setSearchText(\"\");\n          Keyboard.dismiss();\n        }\n      })]\n    }), _jsx(FlatList, {\n      data: data.data,\n      keyExtractor: function keyExtractor(_ref2, index) {\n        var _id = _ref2._id;\n        return _id;\n      },\n      renderItem: function renderItem(_ref3) {\n        var item = _ref3.item;\n\n        if (searchText === \"\") {\n          return _jsx(TouchableNativeFeedback, {\n            onPress: function onPress() {\n              return openScreen(item);\n            },\n            children: _jsxs(View, {\n              style: styles.item,\n              children: [_jsx(Text, {\n                style: styles.title,\n                children: decodeURIComponent(item.Title)\n              }), _jsx(Text, {\n                style: styles.author,\n                children: decodeURIComponent(item.Author)\n              })]\n            })\n          });\n        }\n\n        if (item.Title.toUpperCase().includes(encodeURIComponent(searchText.toUpperCase())) || item.Author.toUpperCase().includes(encodeURIComponent(searchText.toUpperCase()))) {\n          return _jsx(TouchableNativeFeedback, {\n            onPress: function onPress() {\n              return openScreen(item);\n            },\n            children: _jsxs(View, {\n              style: styles.item,\n              children: [_jsx(Text, {\n                style: styles.title,\n                children: decodeURIComponent(item.Title)\n              }), _jsx(Text, {\n                style: styles.author,\n                children: decodeURIComponent(item.Author)\n              })]\n            })\n          });\n        }\n      },\n      refreshControl: _jsx(RefreshControl, {\n        refreshing: isLoading,\n        onRefresh: function onRefresh() {\n          setLoading(true);\n          fetch(APIServiceURL + \"/getAllJobData\").then(function (response) {\n            return response.json();\n          }).then(function (json) {\n            return setData(json);\n          }).catch(function (error) {\n            return console.error(error);\n          }).finally(function () {\n            return setLoading(false);\n          });\n        }\n      })\n    })]\n  });\n};\n\nexport default JobFlatList;","map":{"version":3,"sources":["D:/VTC files/Github/Assignment/fyp/ReactNative/JobApp/navigation/util/FlatList.js"],"names":["React","useEffect","useState","SearchBar","ClearInput","AuthContext","styles","StyleSheet","create","parent","marginLeft","marginRight","borderRadius","borderWidth","flexDirection","justifyContent","container","flex","paddingTop","item","padding","fontSize","height","title","author","JobFlatList","navigation","isLoading","setLoading","data","setData","searchText","setSearchText","useContext","getAPIServiceURL","APIServiceURL","refresh","addListener","fetch","then","response","json","catch","error","console","finally","openScreen","navigate","text","Keyboard","dismiss","index","_id","decodeURIComponent","Title","Author","toUpperCase","includes","encodeURIComponent"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;;;;;;;;;AAeA,OAAOC,SAAP;AACA,OAAOC,UAAP;AAEA,SAASC,WAAT;;;AAEA,IAAMC,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC7BC,EAAAA,MAAM,EAAE;AACJC,IAAAA,UAAU,EAAE,CADR;AAEJC,IAAAA,WAAW,EAAE,CAFT;AAGJC,IAAAA,YAAY,EAAE,CAHV;AAIJC,IAAAA,WAAW,EAAE,CAJT;AAKJC,IAAAA,aAAa,EAAE,KALX;AAMJC,IAAAA,cAAc,EAAE;AANZ,GADqB;AAS7BC,EAAAA,SAAS,EAAE;AACPC,IAAAA,IAAI,EAAE,CADC;AAEPC,IAAAA,UAAU,EAAE;AAFL,GATkB;AAa7BC,EAAAA,IAAI,EAAE;AACFC,IAAAA,OAAO,EAAE,EADP;AAEFC,IAAAA,QAAQ,EAAE,EAFR;AAGFC,IAAAA,MAAM,EAAE;AAHN,GAbuB;AAkB7BC,EAAAA,KAAK,EAAE;AACHF,IAAAA,QAAQ,EAAE;AADP,GAlBsB;AAqB7BG,EAAAA,MAAM,EAAE;AACJH,IAAAA,QAAQ,EAAE;AADN;AArBqB,CAAlB,CAAf;;AAyBA,IAAMI,WAAW,GAAG,SAAdA,WAAc,OAAoB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;;AACpC,wBAAgC1B,KAAK,CAACE,QAAN,CAAe,IAAf,CAAhC;AAAA;AAAA,MAAOyB,SAAP;AAAA,MAAkBC,UAAlB;;AACA,kBAAwB1B,QAAQ,CAAC,EAAD,CAAhC;AAAA;AAAA,MAAO2B,IAAP;AAAA,MAAaC,OAAb;;AACA,mBAAoC5B,QAAQ,CAAC,EAAD,CAA5C;AAAA;AAAA,MAAO6B,UAAP;AAAA,MAAmBC,aAAnB;;AACA,0BAA6BhC,KAAK,CAACiC,UAAN,CAAiB5B,WAAjB,CAA7B;AAAA,MAAQ6B,gBAAR,qBAAQA,gBAAR;;AACA,MAAMC,aAAa,GAAGD,gBAAgB,EAAtC;AACAjC,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAMmC,OAAO,GAAGV,UAAU,CAACW,WAAX,CAAuB,OAAvB,EAAgC,YAAM;AAClDC,MAAAA,KAAK,CAAIH,aAAJ,oBAAL,CACKI,IADL,CACU,UAACC,QAAD;AAAA,eAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,OADV,EAEKF,IAFL,CAEU,UAACE,IAAD;AAAA,eAAUX,OAAO,CAACW,IAAD,CAAjB;AAAA,OAFV,EAGKC,KAHL,CAGW,UAACC,KAAD;AAAA,eAAWC,OAAO,CAACD,KAAR,CAAcA,KAAd,CAAX;AAAA,OAHX,EAIKE,OAJL,CAIa;AAAA,eAAMjB,UAAU,CAAC,KAAD,CAAhB;AAAA,OAJb;AAKH,KANe,CAAhB;AAOH,GARQ,EAQN,EARM,CAAT;;AAWA,MAAMkB,UAAU,GAAG,SAAbA,UAAa,CAAC3B,IAAD,EAAU;AACzBO,IAAAA,UAAU,CAACqB,QAAX,CAAoB,YAApB,EAAkC5B,IAAlC;AACH,GAFD;;AAIA,SACI,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEb,MAAM,CAACU,SAApB;AAAA,eACI,MAAC,IAAD;AAAM,MAAA,KAAK,EAAEV,MAAM,CAACG,MAApB;AAAA,iBACI,KAAC,SAAD;AACI,QAAA,eAAe,EAAC,QADpB;AAEI,QAAA,KAAK,EAAC,QAFV;AAGI,QAAA,aAAa,EAAC,MAHlB;AAII,QAAA,KAAK,EAAEsB,UAJX;AAKI,QAAA,YAAY,EAAE,sBAACiB,IAAD;AAAA,iBAAUhB,aAAa,CAACgB,IAAD,CAAvB;AAAA;AALlB,QADJ,EAQI,KAAC,UAAD;AACI,QAAA,OAAO,EAAE,mBAAM;AACXhB,UAAAA,aAAa,CAAC,EAAD,CAAb;AACAiB,UAAAA,QAAQ,CAACC,OAAT;AACH;AAJL,QARJ;AAAA,MADJ,EAgBI,KAAC,QAAD;AACI,MAAA,IAAI,EAAErB,IAAI,CAACA,IADf;AAEI,MAAA,YAAY,EAAE,6BAAUsB,KAAV;AAAA,YAAGC,GAAH,SAAGA,GAAH;AAAA,eAAoBA,GAApB;AAAA,OAFlB;AAGI,MAAA,UAAU,EAAE,2BAAc;AAAA,YAAXjC,IAAW,SAAXA,IAAW;;AACtB,YAAIY,UAAU,KAAK,EAAnB,EAAuB;AACnB,iBACI,KAAC,uBAAD;AACI,YAAA,OAAO,EAAE;AAAA,qBAAMe,UAAU,CAAC3B,IAAD,CAAhB;AAAA,aADb;AAAA,sBAGI,MAAC,IAAD;AAAM,cAAA,KAAK,EAAEb,MAAM,CAACa,IAApB;AAAA,yBACI,KAAC,IAAD;AAAM,gBAAA,KAAK,EAAEb,MAAM,CAACiB,KAApB;AAAA,0BACK8B,kBAAkB,CAAClC,IAAI,CAACmC,KAAN;AADvB,gBADJ,EAII,KAAC,IAAD;AAAM,gBAAA,KAAK,EAAEhD,MAAM,CAACkB,MAApB;AAAA,0BACK6B,kBAAkB,CAAClC,IAAI,CAACoC,MAAN;AADvB,gBAJJ;AAAA;AAHJ,YADJ;AAcH;;AACD,YACIpC,IAAI,CAACmC,KAAL,CAAWE,WAAX,GAAyBC,QAAzB,CACIC,kBAAkB,CAAC3B,UAAU,CAACyB,WAAX,EAAD,CADtB,KAGArC,IAAI,CAACoC,MAAL,CAAYC,WAAZ,GAA0BC,QAA1B,CACIC,kBAAkB,CAAC3B,UAAU,CAACyB,WAAX,EAAD,CADtB,CAJJ,EAOE;AACE,iBACI,KAAC,uBAAD;AACI,YAAA,OAAO,EAAE;AAAA,qBAAMV,UAAU,CAAC3B,IAAD,CAAhB;AAAA,aADb;AAAA,sBAGI,MAAC,IAAD;AAAM,cAAA,KAAK,EAAEb,MAAM,CAACa,IAApB;AAAA,yBACI,KAAC,IAAD;AAAM,gBAAA,KAAK,EAAEb,MAAM,CAACiB,KAApB;AAAA,0BACK8B,kBAAkB,CAAClC,IAAI,CAACmC,KAAN;AADvB,gBADJ,EAII,KAAC,IAAD;AAAM,gBAAA,KAAK,EAAEhD,MAAM,CAACkB,MAApB;AAAA,0BACK6B,kBAAkB,CAAClC,IAAI,CAACoC,MAAN;AADvB,gBAJJ;AAAA;AAHJ,YADJ;AAcH;AACJ,OA3CL;AA4CI,MAAA,cAAc,EACV,KAAC,cAAD;AACI,QAAA,UAAU,EAAE5B,SADhB;AAEI,QAAA,SAAS,EAAE,qBAAM;AACbC,UAAAA,UAAU,CAAC,IAAD,CAAV;AACAU,UAAAA,KAAK,CAAIH,aAAJ,oBAAL,CACKI,IADL,CACU,UAACC,QAAD;AAAA,mBAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,WADV,EAEKF,IAFL,CAEU,UAACE,IAAD;AAAA,mBAAUX,OAAO,CAACW,IAAD,CAAjB;AAAA,WAFV,EAGKC,KAHL,CAGW,UAACC,KAAD;AAAA,mBAAWC,OAAO,CAACD,KAAR,CAAcA,KAAd,CAAX;AAAA,WAHX,EAIKE,OAJL,CAIa;AAAA,mBAAMjB,UAAU,CAAC,KAAD,CAAhB;AAAA,WAJb;AAKH;AATL;AA7CR,MAhBJ;AAAA,IADJ;AA6EH,CAlGD;;AAoGA,eAAeH,WAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    TouchableWithoutFeedback,\r\n    TouchableNativeFeedback,\r\n    SafeAreaView,\r\n    FlatList,\r\n    StyleSheet,\r\n    Text,\r\n    View,\r\n    ActivityIndicator,\r\n    RefreshControl,\r\n    TouchableOpacity,\r\n    Keyboard,\r\n} from \"react-native\";\r\n\r\nimport SearchBar from \"../../components/SearchBar\";\r\nimport ClearInput from \"../../components/ClearInput\";\r\n\r\nimport { AuthContext } from \"../../components/context\";\r\n\r\nconst styles = StyleSheet.create({\r\n    parent: {\r\n        marginLeft: 0,\r\n        marginRight: 0,\r\n        borderRadius: 0,\r\n        borderWidth: 0,\r\n        flexDirection: \"row\",\r\n        justifyContent: \"space-between\",\r\n    },\r\n    container: {\r\n        flex: 1,\r\n        paddingTop: 0,\r\n    },\r\n    item: {\r\n        padding: 10,\r\n        fontSize: 18,\r\n        height: 66,\r\n    },\r\n    title: {\r\n        fontSize: 20,\r\n    },\r\n    author: {\r\n        fontSize: 15,\r\n    },\r\n});\r\nconst JobFlatList = ({ navigation }) => {\r\n    const [isLoading, setLoading] = React.useState(true);\r\n    const [data, setData] = useState([]);\r\n    const [searchText, setSearchText] = useState(\"\");\r\n    const { getAPIServiceURL } = React.useContext(AuthContext);\r\n    const APIServiceURL = getAPIServiceURL();\r\n    useEffect(() => {\r\n        const refresh = navigation.addListener(\"focus\", () => {\r\n            fetch(`${APIServiceURL}/getAllJobData`)\r\n                .then((response) => response.json())\r\n                .then((json) => setData(json))\r\n                .catch((error) => console.error(error))\r\n                .finally(() => setLoading(false));\r\n        });\r\n    }, []);\r\n\r\n    //function to open JobDetails Screen (item is a parameter contain prop)\r\n    const openScreen = (item) => {\r\n        navigation.navigate(\"JobDetails\", item);\r\n    };\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <View style={styles.parent}>\r\n                <SearchBar\r\n                    clearButtonMode=\"always\"\r\n                    label=\"Search\"\r\n                    returnKeyType=\"next\"\r\n                    value={searchText}\r\n                    onChangeText={(text) => setSearchText(text)}\r\n                />\r\n                <ClearInput\r\n                    onPress={() => {\r\n                        setSearchText(\"\");\r\n                        Keyboard.dismiss();\r\n                    }}\r\n                />\r\n            </View>\r\n            <FlatList\r\n                data={data.data}\r\n                keyExtractor={({ _id }, index) => _id}\r\n                renderItem={({ item }) => {\r\n                    if (searchText === \"\") {\r\n                        return (\r\n                            <TouchableNativeFeedback\r\n                                onPress={() => openScreen(item)}\r\n                            >\r\n                                <View style={styles.item}>\r\n                                    <Text style={styles.title}>\r\n                                        {decodeURIComponent(item.Title)}\r\n                                    </Text>\r\n                                    <Text style={styles.author}>\r\n                                        {decodeURIComponent(item.Author)}\r\n                                    </Text>\r\n                                </View>\r\n                            </TouchableNativeFeedback>\r\n                        );\r\n                    }\r\n                    if (\r\n                        item.Title.toUpperCase().includes(\r\n                            encodeURIComponent(searchText.toUpperCase())\r\n                        ) ||\r\n                        item.Author.toUpperCase().includes(\r\n                            encodeURIComponent(searchText.toUpperCase())\r\n                        )\r\n                    ) {\r\n                        return (\r\n                            <TouchableNativeFeedback\r\n                                onPress={() => openScreen(item)}\r\n                            >\r\n                                <View style={styles.item}>\r\n                                    <Text style={styles.title}>\r\n                                        {decodeURIComponent(item.Title)}\r\n                                    </Text>\r\n                                    <Text style={styles.author}>\r\n                                        {decodeURIComponent(item.Author)}\r\n                                    </Text>\r\n                                </View>\r\n                            </TouchableNativeFeedback>\r\n                        );\r\n                    }\r\n                }}\r\n                refreshControl={\r\n                    <RefreshControl\r\n                        refreshing={isLoading}\r\n                        onRefresh={() => {\r\n                            setLoading(true);\r\n                            fetch(`${APIServiceURL}/getAllJobData`)\r\n                                .then((response) => response.json())\r\n                                .then((json) => setData(json))\r\n                                .catch((error) => console.error(error))\r\n                                .finally(() => setLoading(false));\r\n                        }}\r\n                    />\r\n                }\r\n            />\r\n        </View>\r\n    );\r\n};\r\n\r\nexport default JobFlatList;\r\n"]},"metadata":{},"sourceType":"module"}