{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from \"react\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { AuthContext } from \"../../components/context\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar styles = StyleSheet.create({\n  parent: {\n    marginLeft: 0,\n    marginRight: 0,\n    borderRadius: 0,\n    borderWidth: 0,\n    flexDirection: \"row\",\n    justifyContent: \"space-between\"\n  },\n  container: {\n    flex: 1,\n    paddingTop: 0\n  },\n  item: {\n    padding: 10,\n    fontSize: 18,\n    height: 66\n  },\n  title: {\n    fontSize: 20\n  },\n  author: {\n    fontSize: 15\n  }\n});\n\nvar FollowingFlatList = function FollowingFlatList(_ref) {\n  var navigation = _ref.navigation;\n\n  var _React$useContext = React.useContext(AuthContext),\n      getUserData = _React$useContext.getUserData,\n      getAPIServiceURL = _React$useContext.getAPIServiceURL;\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isLoading = _React$useState2[0],\n      setLoading = _React$useState2[1];\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var UserData = getUserData();\n  var APIServiceURL = getAPIServiceURL();\n  useEffect(function () {\n    var refresh = navigation.addListener(\"focus\", function () {\n      fetch(APIServiceURL + \"/getAllFollowingJobData\", {\n        headers: {\n          user_id: UserData._id\n        }\n      }).then(function (response) {\n        return response.json();\n      }).then(function (json) {\n        return setData(json);\n      }).catch(function (error) {\n        return console.error(error);\n      }).finally(function () {\n        return setLoading(false);\n      });\n    });\n  }, []);\n\n  var openScreen = function openScreen(item) {\n    navigation.navigate(\"JobDetailsFromFollowing\", item);\n  };\n\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(FlatList, {\n      data: data.data,\n      keyExtractor: function keyExtractor(_ref2, index) {\n        var _id = _ref2._id;\n        return _id;\n      },\n      renderItem: function renderItem(_ref3) {\n        var item = _ref3.item;\n        return _jsx(TouchableNativeFeedback, {\n          onPress: function onPress() {\n            return openScreen(item);\n          },\n          children: _jsxs(View, {\n            style: styles.item,\n            children: [_jsx(Text, {\n              style: styles.title,\n              children: decodeURIComponent(item.Title)\n            }), _jsx(Text, {\n              style: styles.author,\n              children: decodeURIComponent(item.Author)\n            })]\n          })\n        });\n      },\n      refreshControl: _jsx(RefreshControl, {\n        refreshing: isLoading,\n        onRefresh: function onRefresh() {\n          setLoading(true);\n          fetch(APIServiceURL + \"/getAllFollowingJobData\", {\n            headers: {\n              user_id: UserData._id\n            }\n          }).then(function (response) {\n            return response.json();\n          }).then(function (json) {\n            return setData(json);\n          }).catch(function (error) {\n            return console.error(error);\n          }).finally(function () {\n            return setLoading(false);\n          });\n        }\n      })\n    })\n  });\n};\n\nexport default FollowingFlatList;","map":{"version":3,"sources":["D:/VTC files/Github/Assignment/fyp/ReactNative/JobApp/navigation/util/FlatListFollowing.js"],"names":["React","useEffect","useState","AuthContext","styles","StyleSheet","create","parent","marginLeft","marginRight","borderRadius","borderWidth","flexDirection","justifyContent","container","flex","paddingTop","item","padding","fontSize","height","title","author","FollowingFlatList","navigation","useContext","getUserData","getAPIServiceURL","isLoading","setLoading","data","setData","UserData","APIServiceURL","refresh","addListener","fetch","headers","user_id","_id","then","response","json","catch","error","console","finally","openScreen","navigate","index","decodeURIComponent","Title","Author"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;;;;;;;;AAaA,SAASC,WAAT;;;AAEA,IAAMC,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC7BC,EAAAA,MAAM,EAAE;AACJC,IAAAA,UAAU,EAAE,CADR;AAEJC,IAAAA,WAAW,EAAE,CAFT;AAGJC,IAAAA,YAAY,EAAE,CAHV;AAIJC,IAAAA,WAAW,EAAE,CAJT;AAKJC,IAAAA,aAAa,EAAE,KALX;AAMJC,IAAAA,cAAc,EAAE;AANZ,GADqB;AAS7BC,EAAAA,SAAS,EAAE;AACPC,IAAAA,IAAI,EAAE,CADC;AAEPC,IAAAA,UAAU,EAAE;AAFL,GATkB;AAa7BC,EAAAA,IAAI,EAAE;AACFC,IAAAA,OAAO,EAAE,EADP;AAEFC,IAAAA,QAAQ,EAAE,EAFR;AAGFC,IAAAA,MAAM,EAAE;AAHN,GAbuB;AAkB7BC,EAAAA,KAAK,EAAE;AACHF,IAAAA,QAAQ,EAAE;AADP,GAlBsB;AAqB7BG,EAAAA,MAAM,EAAE;AACJH,IAAAA,QAAQ,EAAE;AADN;AArBqB,CAAlB,CAAf;;AAyBA,IAAMI,iBAAiB,GAAG,SAApBA,iBAAoB,OAAoB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;;AAC1C,0BAA0CxB,KAAK,CAACyB,UAAN,CAAiBtB,WAAjB,CAA1C;AAAA,MAAQuB,WAAR,qBAAQA,WAAR;AAAA,MAAqBC,gBAArB,qBAAqBA,gBAArB;;AACA,wBAAgC3B,KAAK,CAACE,QAAN,CAAe,IAAf,CAAhC;AAAA;AAAA,MAAO0B,SAAP;AAAA,MAAkBC,UAAlB;;AACA,kBAAwB3B,QAAQ,CAAC,EAAD,CAAhC;AAAA;AAAA,MAAO4B,IAAP;AAAA,MAAaC,OAAb;;AACA,MAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,MAAMO,aAAa,GAAGN,gBAAgB,EAAtC;AACA1B,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAMiC,OAAO,GAAGV,UAAU,CAACW,WAAX,CAAuB,OAAvB,EAAgC,YAAM;AAClDC,MAAAA,KAAK,CAAIH,aAAJ,8BAA4C;AAC7CI,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAEN,QAAQ,CAACO;AADb;AADoC,OAA5C,CAAL,CAKKC,IALL,CAKU,UAACC,QAAD;AAAA,eAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,OALV,EAMKF,IANL,CAMU,UAACE,IAAD;AAAA,eAAUX,OAAO,CAACW,IAAD,CAAjB;AAAA,OANV,EAOKC,KAPL,CAOW,UAACC,KAAD;AAAA,eAAWC,OAAO,CAACD,KAAR,CAAcA,KAAd,CAAX;AAAA,OAPX,EAQKE,OARL,CAQa;AAAA,eAAMjB,UAAU,CAAC,KAAD,CAAhB;AAAA,OARb;AASH,KAVe,CAAhB;AAWH,GAZQ,EAYN,EAZM,CAAT;;AAeA,MAAMkB,UAAU,GAAG,SAAbA,UAAa,CAAC9B,IAAD,EAAU;AACzBO,IAAAA,UAAU,CAACwB,QAAX,CAAoB,yBAApB,EAA+C/B,IAA/C;AACH,GAFD;;AAIA,SACI,KAAC,IAAD;AAAM,IAAA,KAAK,EAAEb,MAAM,CAACU,SAApB;AAAA,cACI,KAAC,QAAD;AACI,MAAA,IAAI,EAAEgB,IAAI,CAACA,IADf;AAEI,MAAA,YAAY,EAAE,6BAAUmB,KAAV;AAAA,YAAGV,GAAH,SAAGA,GAAH;AAAA,eAAoBA,GAApB;AAAA,OAFlB;AAGI,MAAA,UAAU,EAAE,2BAAc;AAAA,YAAXtB,IAAW,SAAXA,IAAW;AACtB,eACI,KAAC,uBAAD;AACI,UAAA,OAAO,EAAE;AAAA,mBAAM8B,UAAU,CAAC9B,IAAD,CAAhB;AAAA,WADb;AAAA,oBAGI,MAAC,IAAD;AAAM,YAAA,KAAK,EAAEb,MAAM,CAACa,IAApB;AAAA,uBACI,KAAC,IAAD;AAAM,cAAA,KAAK,EAAEb,MAAM,CAACiB,KAApB;AAAA,wBACK6B,kBAAkB,CAACjC,IAAI,CAACkC,KAAN;AADvB,cADJ,EAII,KAAC,IAAD;AAAM,cAAA,KAAK,EAAE/C,MAAM,CAACkB,MAApB;AAAA,wBACK4B,kBAAkB,CAACjC,IAAI,CAACmC,MAAN;AADvB,cAJJ;AAAA;AAHJ,UADJ;AAcH,OAlBL;AAmBI,MAAA,cAAc,EACV,KAAC,cAAD;AACI,QAAA,UAAU,EAAExB,SADhB;AAEI,QAAA,SAAS,EAAE,qBAAM;AACbC,UAAAA,UAAU,CAAC,IAAD,CAAV;AACAO,UAAAA,KAAK,CAAIH,aAAJ,8BAA4C;AAC7CI,YAAAA,OAAO,EAAE;AACLC,cAAAA,OAAO,EAAEN,QAAQ,CAACO;AADb;AADoC,WAA5C,CAAL,CAKKC,IALL,CAKU,UAACC,QAAD;AAAA,mBAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,WALV,EAMKF,IANL,CAMU,UAACE,IAAD;AAAA,mBAAUX,OAAO,CAACW,IAAD,CAAjB;AAAA,WANV,EAOKC,KAPL,CAOW,UAACC,KAAD;AAAA,mBAAWC,OAAO,CAACD,KAAR,CAAcA,KAAd,CAAX;AAAA,WAPX,EAQKE,OARL,CAQa;AAAA,mBAAMjB,UAAU,CAAC,KAAD,CAAhB;AAAA,WARb;AASH;AAbL;AApBR;AADJ,IADJ;AAyCH,CAlED;;AAoEA,eAAeN,iBAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    TouchableWithoutFeedback,\r\n    TouchableNativeFeedback,\r\n    SafeAreaView,\r\n    FlatList,\r\n    StyleSheet,\r\n    Text,\r\n    View,\r\n    ActivityIndicator,\r\n    RefreshControl,\r\n    TouchableOpacity,\r\n} from \"react-native\";\r\nimport { AuthContext } from \"../../components/context\";\r\n\r\nconst styles = StyleSheet.create({\r\n    parent: {\r\n        marginLeft: 0,\r\n        marginRight: 0,\r\n        borderRadius: 0,\r\n        borderWidth: 0,\r\n        flexDirection: \"row\",\r\n        justifyContent: \"space-between\",\r\n    },\r\n    container: {\r\n        flex: 1,\r\n        paddingTop: 0,\r\n    },\r\n    item: {\r\n        padding: 10,\r\n        fontSize: 18,\r\n        height: 66,\r\n    },\r\n    title: {\r\n        fontSize: 20,\r\n    },\r\n    author: {\r\n        fontSize: 15,\r\n    },\r\n});\r\nconst FollowingFlatList = ({ navigation }) => {\r\n    const { getUserData, getAPIServiceURL } = React.useContext(AuthContext);\r\n    const [isLoading, setLoading] = React.useState(true);\r\n    const [data, setData] = useState([]);\r\n    const UserData = getUserData();\r\n    const APIServiceURL = getAPIServiceURL();\r\n    useEffect(() => {\r\n        const refresh = navigation.addListener(\"focus\", () => {\r\n            fetch(`${APIServiceURL}/getAllFollowingJobData`, {\r\n                headers: {\r\n                    user_id: UserData._id,\r\n                },\r\n            })\r\n                .then((response) => response.json())\r\n                .then((json) => setData(json))\r\n                .catch((error) => console.error(error))\r\n                .finally(() => setLoading(false));\r\n        });\r\n    }, []);\r\n\r\n    //function to open JobDetails Screen (item is a parameter contain prop)\r\n    const openScreen = (item) => {\r\n        navigation.navigate(\"JobDetailsFromFollowing\", item);\r\n    };\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <FlatList\r\n                data={data.data}\r\n                keyExtractor={({ _id }, index) => _id}\r\n                renderItem={({ item }) => {\r\n                    return (\r\n                        <TouchableNativeFeedback\r\n                            onPress={() => openScreen(item)}\r\n                        >\r\n                            <View style={styles.item}>\r\n                                <Text style={styles.title}>\r\n                                    {decodeURIComponent(item.Title)}\r\n                                </Text>\r\n                                <Text style={styles.author}>\r\n                                    {decodeURIComponent(item.Author)}\r\n                                </Text>\r\n                            </View>\r\n                        </TouchableNativeFeedback>\r\n                    );\r\n                }}\r\n                refreshControl={\r\n                    <RefreshControl\r\n                        refreshing={isLoading}\r\n                        onRefresh={() => {\r\n                            setLoading(true);\r\n                            fetch(`${APIServiceURL}/getAllFollowingJobData`, {\r\n                                headers: {\r\n                                    user_id: UserData._id,\r\n                                },\r\n                            })\r\n                                .then((response) => response.json())\r\n                                .then((json) => setData(json))\r\n                                .catch((error) => console.error(error))\r\n                                .finally(() => setLoading(false));\r\n                        }}\r\n                    />\r\n                }\r\n            />\r\n        </View>\r\n    );\r\n};\r\n\r\nexport default FollowingFlatList;\r\n"]},"metadata":{},"sourceType":"module"}