{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ToastAndroid from \"react-native-web/dist/exports/ToastAndroid\";\nimport { AuthContext } from \"../../components/context\";\nimport Header from \"../../components/Header\";\nimport { theme } from \"../../Core/Theme\";\nimport TextInput from \"../../components/TextInput\";\nimport Background from \"../../components/Background\";\nimport Button from \"../../components/Button\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function CreateNoteScreen(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n  var FromRedirectButton = route.params === undefined ? false : true;\n\n  var _React$useContext = React.useContext(AuthContext),\n      getUserToken = _React$useContext.getUserToken,\n      getAPIServiceURL = _React$useContext.getAPIServiceURL;\n\n  var UserToken = getUserToken();\n  var APIServiceURL = getAPIServiceURL();\n\n  var _useState = useState({\n    value: \"\",\n    error: \"\"\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      Note = _useState2[0],\n      setNote = _useState2[1];\n\n  var Job = FromRedirectButton ? route.params.Job : {};\n\n  var onSubmitPressed = function onSubmitPressed() {\n    if (Note.value === \"\") {\n      return setNote(_objectSpread(_objectSpread({}, Note), {}, {\n        error: \"Please enter Note\"\n      }));\n    }\n\n    if (FromRedirectButton) {\n      fetch(APIServiceURL + \"/addNote\", {\n        headers: {\n          UserToken: UserToken,\n          job_id: Job._id,\n          Note: encodeURIComponent(Note.value)\n        }\n      }).then(function (response) {\n        if (response.status === 200) {\n          response.json().then(function (json) {\n            if (json.success) {\n              ToastAndroid.show(\"Note Added\", ToastAndroid.SHORT);\n              fetch(APIServiceURL + \"/getNote\", {\n                headers: {\n                  job_id: Job._id,\n                  usertoken: UserToken\n                }\n              }).then(function (response) {\n                if (response.status === 200) {\n                  response.json().then(function (json) {\n                    if (json.success) {\n                      navigation.navigate(\"Note Details\", {\n                        Job: Job,\n                        Note: json.data\n                      });\n                    } else {\n                      navigation.goBack();\n                    }\n                  });\n                } else {\n                  Alert.alert(\"Server currently not available\");\n                }\n              });\n            } else {\n              Alert.alert(json.message);\n            }\n          });\n        } else {\n          setNote(_objectSpread(_objectSpread({}, Note), {}, {\n            error: \"Server currently not available\"\n          }));\n        }\n      });\n    } else {\n      fetch(APIServiceURL + \"/addNote\", {\n        headers: {\n          usertoken: UserToken,\n          note: encodeURIComponent(Note.value)\n        }\n      }).then(function (response) {\n        if (response.status === 200) {\n          response.json().then(function (json) {\n            if (json.success) {\n              ToastAndroid.show(\"Note Added\", ToastAndroid.SHORT);\n              navigation.goBack();\n            } else {\n              Alert.alert(json.message);\n            }\n          });\n        } else {\n          setNote(_objectSpread(_objectSpread({}, Note), {}, {\n            error: \"Server currently not available\"\n          }));\n        }\n      });\n    }\n  };\n\n  return _jsx(ScrollView, {\n    children: _jsxs(Background, {\n      children: [FromRedirectButton ? _jsxs(View, {\n        children: [_jsx(Header, {\n          children: \"Add New Note To The Job\"\n        }), _jsx(Text, {\n          style: styles.text,\n          children: decodeURIComponent(Job.Title)\n        })]\n      }) : _jsx(Header, {\n        children: \"Add New Note\"\n      }), _jsx(TextInput, {\n        label: \"Note (Mutiple lines supported)\",\n        returnKeyType: \"done\",\n        value: Note.value,\n        onChangeText: function onChangeText(text) {\n          return setNote({\n            value: text,\n            error: \"\"\n          });\n        },\n        multiline: true,\n        style: styles.Details,\n        error: !!Note.error,\n        errorText: Note.error\n      }), _jsx(Button, {\n        mode: \"contained\",\n        onPress: onSubmitPressed,\n        children: \"Submit\"\n      })]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  forgotPassword: {\n    width: \"100%\",\n    alignItems: \"flex-end\",\n    marginBottom: 24\n  },\n  row: {\n    flexDirection: \"row\",\n    marginTop: 4\n  },\n  forgot: {\n    fontSize: 13,\n    color: theme.colors.secondary\n  },\n  link: {\n    fontWeight: \"bold\",\n    color: theme.colors.primary\n  },\n  TextInput: {\n    padding: 50\n  },\n  Details: {\n    backgroundColor: \"#fff\",\n    borderBottomColor: \"#000000\",\n    borderBottomWidth: 1\n  }\n});","map":{"version":3,"sources":["D:/VTC files/Github/Assignment/fyp/ReactNative/JobApp/navigation/screens/CreateNoteScreen.js"],"names":["React","useState","AuthContext","Header","theme","TextInput","Background","Button","CreateNoteScreen","navigation","route","FromRedirectButton","params","undefined","useContext","getUserToken","getAPIServiceURL","UserToken","APIServiceURL","value","error","Note","setNote","Job","onSubmitPressed","fetch","headers","job_id","_id","encodeURIComponent","then","response","status","json","success","ToastAndroid","show","SHORT","usertoken","navigate","data","goBack","Alert","alert","message","note","styles","text","decodeURIComponent","Title","Details","StyleSheet","create","forgotPassword","width","alignItems","marginBottom","row","flexDirection","marginTop","forgot","fontSize","color","colors","secondary","link","fontWeight","primary","padding","backgroundColor","borderBottomColor","borderBottomWidth"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n    View,\r\n    Text,\r\n    StyleSheet,\r\n    ScrollView,\r\n    Alert,\r\n    ToastAndroid,\r\n} from \"react-native\";\r\n\r\nimport { AuthContext } from \"../../components/context\";\r\n\r\nimport Header from \"../../components/Header\";\r\nimport { theme } from \"../../Core/Theme\";\r\nimport TextInput from \"../../components/TextInput\";\r\nimport Background from \"../../components/Background\";\r\nimport Button from \"../../components/Button\";\r\n\r\nexport default function CreateNoteScreen({ navigation, route }) {\r\n    const FromRedirectButton = route.params === undefined ? false : true;\r\n    const { getUserToken, getAPIServiceURL } = React.useContext(AuthContext);\r\n    const UserToken = getUserToken();\r\n    const APIServiceURL = getAPIServiceURL();\r\n    const [Note, setNote] = useState({ value: \"\", error: \"\" });\r\n    const Job = FromRedirectButton ? route.params.Job : {};\r\n\r\n    const onSubmitPressed = () => {\r\n        if (Note.value === \"\") {\r\n            return setNote({\r\n                ...Note,\r\n                error: \"Please enter Note\",\r\n            });\r\n        }\r\n        if (FromRedirectButton) {\r\n            fetch(`${APIServiceURL}/addNote`, {\r\n                headers: {\r\n                    UserToken: UserToken,\r\n                    job_id: Job._id,\r\n                    Note: encodeURIComponent(Note.value),\r\n                },\r\n            }).then((response) => {\r\n                if (response.status === 200) {\r\n                    response.json().then((json) => {\r\n                        if (json.success) {\r\n                            ToastAndroid.show(\"Note Added\", ToastAndroid.SHORT);\r\n                            //DONE: goto Note details page\r\n                            fetch(`${APIServiceURL}/getNote`, {\r\n                                headers: {\r\n                                    job_id: Job._id,\r\n                                    usertoken: UserToken,\r\n                                },\r\n                            }).then((response) => {\r\n                                if (response.status === 200) {\r\n                                    response.json().then((json) => {\r\n                                        if (json.success) {\r\n                                            navigation.navigate(\r\n                                                \"Note Details\",\r\n                                                {\r\n                                                    Job: Job,\r\n                                                    Note: json.data,\r\n                                                }\r\n                                            );\r\n                                        } else {\r\n                                            navigation.goBack();\r\n                                        }\r\n                                    });\r\n                                } else {\r\n                                    Alert.alert(\r\n                                        \"Server currently not available\"\r\n                                    );\r\n                                }\r\n                            });\r\n                        } else {\r\n                            Alert.alert(json.message);\r\n                        }\r\n                    });\r\n                } else {\r\n                    setNote({\r\n                        ...Note,\r\n                        error: \"Server currently not available\",\r\n                    });\r\n                }\r\n            });\r\n        } else {\r\n            fetch(`${APIServiceURL}/addNote`, {\r\n                headers: {\r\n                    usertoken: UserToken,\r\n                    note: encodeURIComponent(Note.value),\r\n                },\r\n            }).then((response) => {\r\n                if (response.status === 200) {\r\n                    response.json().then((json) => {\r\n                        if (json.success) {\r\n                            ToastAndroid.show(\"Note Added\", ToastAndroid.SHORT);\r\n                            navigation.goBack();\r\n                        } else {\r\n                            Alert.alert(json.message);\r\n                        }\r\n                    });\r\n                } else {\r\n                    setNote({\r\n                        ...Note,\r\n                        error: \"Server currently not available\",\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ScrollView>\r\n            <Background>\r\n                {FromRedirectButton ? (\r\n                    <View>\r\n                        <Header>Add New Note To The Job</Header>\r\n                        <Text style={styles.text}>\r\n                            {decodeURIComponent(Job.Title)}\r\n                        </Text>\r\n                    </View>\r\n                ) : (\r\n                    <Header>Add New Note</Header>\r\n                )}\r\n                <TextInput\r\n                    label=\"Note (Mutiple lines supported)\"\r\n                    returnKeyType=\"done\"\r\n                    value={Note.value}\r\n                    onChangeText={(text) => setNote({ value: text, error: \"\" })}\r\n                    multiline\r\n                    style={styles.Details}\r\n                    error={!!Note.error}\r\n                    errorText={Note.error}\r\n                />\r\n                <Button mode=\"contained\" onPress={onSubmitPressed}>\r\n                    Submit\r\n                </Button>\r\n            </Background>\r\n        </ScrollView>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    forgotPassword: {\r\n        width: \"100%\",\r\n        alignItems: \"flex-end\",\r\n        marginBottom: 24,\r\n    },\r\n    row: {\r\n        flexDirection: \"row\",\r\n        marginTop: 4,\r\n    },\r\n    forgot: {\r\n        fontSize: 13,\r\n        color: theme.colors.secondary,\r\n    },\r\n    link: {\r\n        fontWeight: \"bold\",\r\n        color: theme.colors.primary,\r\n    },\r\n    TextInput: {\r\n        padding: 50,\r\n    },\r\n    Details: {\r\n        backgroundColor: \"#fff\",\r\n        borderBottomColor: \"#000000\",\r\n        borderBottomWidth: 1,\r\n    },\r\n});\r\n\r\n// #NOTE: This is Example route.params\r\n// Object {\r\n//     \"key\": \"Create Note-4NaN9Lo9dESFnzA_kLNJ5\",\r\n//     \"name\": \"Create Note\",\r\n//     \"params\": Object {\r\n//       \"Job\": Object {\r\n//         \"Author\": \"Cheungwaiyin\",\r\n//         \"AuthorID\": \"61d2c4e2cddf3454f88c77d2\",\r\n//         \"Details\": \"Wwe\",\r\n//         \"Title\": \"Abbb\",\r\n//         \"_id\": \"61d2cf1b4fecc0b50fc08600\",\r\n//       },\r\n//     },\r\n//     \"path\": undefined,\r\n//   }\r\n"]},"metadata":{},"sourceType":"module"}