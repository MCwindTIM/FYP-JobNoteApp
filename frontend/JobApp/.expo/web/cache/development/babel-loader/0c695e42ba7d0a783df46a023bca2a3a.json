{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from \"react\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 0\n  },\n  item: {\n    padding: 10,\n    fontSize: 18,\n    height: 66\n  },\n  title: {\n    fontSize: 20\n  },\n  author: {\n    fontSize: 15\n  }\n});\n\nvar JobFlatList = function JobFlatList(_ref) {\n  var navigation = _ref.navigation;\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isLoading = _React$useState2[0],\n      setLoading = _React$useState2[1];\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  useEffect(function () {\n    fetch(\"http://223.16.12.55:3000/getAllJobData\").then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      return setData(json);\n    }).catch(function (error) {\n      return console.error(error);\n    }).finally(function () {\n      return setLoading(false);\n    });\n  }, []);\n\n  var openScreen = function openScreen(item) {\n    navigation.navigate(\"JobDetails\", item);\n  };\n\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(FlatList, {\n      data: data.data,\n      keyExtractor: function keyExtractor(_ref2, index) {\n        var _id = _ref2._id;\n        return _id;\n      },\n      renderItem: function renderItem(_ref3) {\n        var item = _ref3.item;\n        return _jsx(TouchableWithoutFeedback, {\n          onPress: function onPress() {\n            return openScreen(item);\n          },\n          children: _jsxs(View, {\n            style: styles.item,\n            children: [_jsx(Text, {\n              style: styles.title,\n              children: item.Title\n            }), _jsx(Text, {\n              style: styles.author,\n              children: item.Author\n            })]\n          })\n        });\n      },\n      refreshControl: _jsx(RefreshControl, {\n        refreshing: isLoading,\n        onRefresh: function onRefresh() {\n          setLoading(true);\n          fetch(\"http://223.16.12.55:3000/getAllJobData\").then(function (response) {\n            return response.json();\n          }).then(function (json) {\n            return setData(json);\n          }).catch(function (error) {\n            return console.error(error);\n          }).finally(function () {\n            return setLoading(false);\n          });\n        }\n      })\n    })\n  });\n};\n\nexport default JobFlatList;","map":{"version":3,"sources":["D:/VTC files/Github/Assignment/fyp/ReactNative/JobApp/navigation/util/FlatList.js"],"names":["React","useEffect","useState","styles","StyleSheet","create","container","flex","paddingTop","item","padding","fontSize","height","title","author","JobFlatList","navigation","isLoading","setLoading","data","setData","fetch","then","response","json","catch","error","console","finally","openScreen","navigate","index","_id","Title","Author"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    TouchableWithoutFeedback,\r\n    SafeAreaView,\r\n    FlatList,\r\n    StyleSheet,\r\n    Text,\r\n    View,\r\n} from \"react-native\";\r\nimport { RefreshControl } from \"react-native\";\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        paddingTop: 0,\r\n    },\r\n    item: {\r\n        padding: 10,\r\n        fontSize: 18,\r\n        height: 66,\r\n    },\r\n    title: {\r\n        fontSize: 20,\r\n    },\r\n    author: {\r\n        fontSize: 15,\r\n    },\r\n});\r\nconst JobFlatList = ({ navigation }) => {\r\n    const [isLoading, setLoading] = React.useState(true);\r\n    const [data, setData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetch(\"http://223.16.12.55:3000/getAllJobData\")\r\n            .then((response) => response.json())\r\n            .then((json) => setData(json))\r\n            .catch((error) => console.error(error))\r\n            .finally(() => setLoading(false));\r\n    }, []);\r\n\r\n    //function to open blank Screen\r\n    const openScreen = (item) => {\r\n        navigation.navigate(\"JobDetails\", item);\r\n    };\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <FlatList\r\n                data={data.data}\r\n                keyExtractor={({ _id }, index) => _id}\r\n                renderItem={({ item }) => (\r\n                    <TouchableWithoutFeedback onPress={() => openScreen(item)}>\r\n                        <View style={styles.item}>\r\n                            <Text style={styles.title}>{item.Title}</Text>\r\n                            <Text style={styles.author}>{item.Author}</Text>\r\n                        </View>\r\n                    </TouchableWithoutFeedback>\r\n                )}\r\n                refreshControl={\r\n                    <RefreshControl\r\n                        refreshing={isLoading}\r\n                        onRefresh={() => {\r\n                            setLoading(true);\r\n                            fetch(\"http://223.16.12.55:3000/getAllJobData\")\r\n                                .then((response) => response.json())\r\n                                .then((json) => setData(json))\r\n                                .catch((error) => console.error(error))\r\n                                .finally(() => setLoading(false));\r\n                        }}\r\n                    />\r\n                }\r\n            />\r\n        </View>\r\n    );\r\n};\r\n\r\nexport default JobFlatList;\r\n"]},"metadata":{},"sourceType":"module"}