{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Toast from \"react-native-simple-toast\";\nimport { AuthContext } from \"../../components/context\";\nimport Header from \"../../components/Header\";\nimport { theme } from \"../../Core/Theme\";\nimport TextInput from \"../../components/TextInput\";\nimport Background from \"../../components/Background\";\nimport Button from \"../../components/Button\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function PostJob(_ref) {\n  var navigation = _ref.navigation;\n\n  var _React$useContext = React.useContext(AuthContext),\n      getUserToken = _React$useContext.getUserToken,\n      getAPIServiceURL = _React$useContext.getAPIServiceURL;\n\n  var UserToken = getUserToken();\n  var APIServiceURL = getAPIServiceURL();\n\n  var _useState = useState({\n    value: \"\",\n    error: \"\"\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      JobTitle = _useState2[0],\n      setJobTitle = _useState2[1];\n\n  var _useState3 = useState({\n    value: \"\",\n    error: \"\"\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      JobDetails = _useState4[0],\n      setJobDetails = _useState4[1];\n\n  var onSubmitPressed = function onSubmitPressed() {\n    if (JobTitle.value === \"\") {\n      return setJobTitle(_objectSpread(_objectSpread({}, JobTitle), {}, {\n        error: \"Please enter a job title\"\n      }));\n    }\n\n    if (JobDetails.value === \"\") {\n      return setJobDetails(_objectSpread(_objectSpread({}, JobDetails), {}, {\n        error: \"Please enter job details\"\n      }));\n    }\n\n    fetch(APIServiceURL + \"/postJob\", {\n      headers: {\n        UserToken: UserToken,\n        JobTitle: encodeURIComponent(JobTitle.value),\n        JobDetails: encodeURIComponent(JobDetails.value)\n      }\n    }).then(function (response) {\n      if (response.status === 200) {\n        response.json().then(function (json) {\n          if (json.success) {\n            Toast.show(\"Post Success!\", Toast.SHORT);\n            navigation.navigate(\"JobList\");\n          } else {\n            console.log(json);\n            console.log(\"failed!\");\n          }\n        });\n      } else {\n        setJobDetails(_objectSpread(_objectSpread({}, JobDetails), {}, {\n          error: \"Server currently not available\"\n        }));\n      }\n    });\n  };\n\n  return _jsx(ScrollView, {\n    children: _jsxs(Background, {\n      children: [_jsx(Header, {\n        children: \"Post a New Job\"\n      }), _jsx(TextInput, {\n        label: \"Title\",\n        returnKeyType: \"next\",\n        value: JobTitle.value,\n        onChangeText: function onChangeText(text) {\n          return setJobTitle({\n            value: text,\n            error: \"\"\n          });\n        },\n        error: !!JobTitle.error,\n        errorText: JobTitle.error\n      }), _jsx(TextInput, {\n        label: \"Details (Mutiple lines supported)\",\n        returnKeyType: \"done\",\n        value: JobDetails.value,\n        onChangeText: function onChangeText(text) {\n          return setJobDetails({\n            value: text,\n            error: \"\"\n          });\n        },\n        multiline: true,\n        style: styles.Details,\n        error: !!JobDetails.error,\n        errorText: JobDetails.error\n      }), _jsx(Button, {\n        mode: \"contained\",\n        onPress: onSubmitPressed,\n        children: \"Submit\"\n      })]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  forgotPassword: {\n    width: \"100%\",\n    alignItems: \"flex-end\",\n    marginBottom: 24\n  },\n  row: {\n    flexDirection: \"row\",\n    marginTop: 4\n  },\n  forgot: {\n    fontSize: 13,\n    color: theme.colors.secondary\n  },\n  link: {\n    fontWeight: \"bold\",\n    color: theme.colors.primary\n  },\n  TextInput: {\n    padding: 50\n  },\n  Details: {\n    backgroundColor: \"#fff\",\n    borderBottomColor: \"#000000\",\n    borderBottomWidth: 1\n  }\n});","map":{"version":3,"sources":["D:/VTC files/Github/Assignment/fyp/ReactNative/JobApp/navigation/screens/PostJob.js"],"names":["React","useState","Toast","AuthContext","Header","theme","TextInput","Background","Button","PostJob","navigation","useContext","getUserToken","getAPIServiceURL","UserToken","APIServiceURL","value","error","JobTitle","setJobTitle","JobDetails","setJobDetails","onSubmitPressed","fetch","headers","encodeURIComponent","then","response","status","json","success","show","SHORT","navigate","console","log","text","styles","Details","StyleSheet","create","forgotPassword","width","alignItems","marginBottom","row","flexDirection","marginTop","forgot","fontSize","color","colors","secondary","link","fontWeight","primary","padding","backgroundColor","borderBottomColor","borderBottomWidth"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { View, Text, StyleSheet, ScrollView } from \"react-native\";\r\nimport Toast from \"react-native-simple-toast\";\r\n\r\nimport { AuthContext } from \"../../components/context\";\r\n\r\nimport Header from \"../../components/Header\";\r\nimport { theme } from \"../../Core/Theme\";\r\nimport TextInput from \"../../components/TextInput\";\r\nimport Background from \"../../components/Background\";\r\nimport Button from \"../../components/Button\";\r\n\r\nexport default function PostJob({ navigation }) {\r\n    const { getUserToken, getAPIServiceURL } = React.useContext(AuthContext);\r\n    const UserToken = getUserToken();\r\n    const APIServiceURL = getAPIServiceURL();\r\n    const [JobTitle, setJobTitle] = useState({ value: \"\", error: \"\" });\r\n    const [JobDetails, setJobDetails] = useState({ value: \"\", error: \"\" });\r\n\r\n    const onSubmitPressed = () => {\r\n        if (JobTitle.value === \"\") {\r\n            return setJobTitle({\r\n                ...JobTitle,\r\n                error: \"Please enter a job title\",\r\n            });\r\n        }\r\n        if (JobDetails.value === \"\") {\r\n            return setJobDetails({\r\n                ...JobDetails,\r\n                error: \"Please enter job details\",\r\n            });\r\n        }\r\n        fetch(`${APIServiceURL}/postJob`, {\r\n            headers: {\r\n                UserToken: UserToken,\r\n                JobTitle: encodeURIComponent(JobTitle.value),\r\n                JobDetails: encodeURIComponent(JobDetails.value),\r\n            },\r\n        }).then((response) => {\r\n            if (response.status === 200) {\r\n                response.json().then((json) => {\r\n                    if (json.success) {\r\n                        Toast.show(\"Post Success!\", Toast.SHORT);\r\n                        navigation.navigate(\"JobList\");\r\n                    } else {\r\n                        console.log(json);\r\n                        console.log(\"failed!\");\r\n                    }\r\n                });\r\n            } else {\r\n                setJobDetails({\r\n                    ...JobDetails,\r\n                    error: \"Server currently not available\",\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    return (\r\n        <ScrollView>\r\n            <Background>\r\n                <Header>Post a New Job</Header>\r\n                <TextInput\r\n                    label=\"Title\"\r\n                    returnKeyType=\"next\"\r\n                    value={JobTitle.value}\r\n                    onChangeText={(text) =>\r\n                        setJobTitle({ value: text, error: \"\" })\r\n                    }\r\n                    error={!!JobTitle.error}\r\n                    errorText={JobTitle.error}\r\n                />\r\n                <TextInput\r\n                    label=\"Details (Mutiple lines supported)\"\r\n                    returnKeyType=\"done\"\r\n                    value={JobDetails.value}\r\n                    onChangeText={(text) =>\r\n                        setJobDetails({ value: text, error: \"\" })\r\n                    }\r\n                    multiline\r\n                    style={styles.Details}\r\n                    error={!!JobDetails.error}\r\n                    errorText={JobDetails.error}\r\n                />\r\n                <Button mode=\"contained\" onPress={onSubmitPressed}>\r\n                    Submit\r\n                </Button>\r\n            </Background>\r\n        </ScrollView>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    forgotPassword: {\r\n        width: \"100%\",\r\n        alignItems: \"flex-end\",\r\n        marginBottom: 24,\r\n    },\r\n    row: {\r\n        flexDirection: \"row\",\r\n        marginTop: 4,\r\n    },\r\n    forgot: {\r\n        fontSize: 13,\r\n        color: theme.colors.secondary,\r\n    },\r\n    link: {\r\n        fontWeight: \"bold\",\r\n        color: theme.colors.primary,\r\n    },\r\n    TextInput: {\r\n        padding: 50,\r\n    },\r\n    Details: {\r\n        backgroundColor: \"#fff\",\r\n        borderBottomColor: \"#000000\",\r\n        borderBottomWidth: 1,\r\n    },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}